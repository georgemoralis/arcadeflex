/***************************************************************************

	Midway MCR-68k system

	Currently implemented:
		* Zwackery (Chip Squeak Deluxe)
		* Xenopohobe (Sounds Good)
		* Spy Hunter 2 (Sounds Good/Turbo Chip Squeak)
		* Blasted (Sounds Good)
		* Arch Rivals
		* Tri-Sports
		* Pigskin 621AD

	Emulation by Bryan McPhail, mish@tendril.co.uk and
	Aaron Giles agiles@pobox.com

****************************************************************************

	Memory map

****************************************************************************

	========================================================================
	CPU #1
	========================================================================
	000000-03FFFF   R     xxxxxxxx xxxxxxxx    Program ROM
	060000-063FFF   R/W   xxxxxxxx xxxxxxxx    Program RAM
	070000-070FFF   R/W   xxxxxxxx xxxxxxxx    Background video RAM
	071000-071FFF   R/W   xxxxxxxx xxxxxxxx    Additional RAM
	080000-080FFF   R/W   xxxxxxxx xxxxxxxx    Sprite RAM
	090000-0900FF     W   xxxxxxxx xxxxxxxx    Palette RAM
	0A0000-0A000F   R/W   xxxxxxxx --------    M6840 I/O
	0B0000-0B0001     W   -------- --------    Watchdog
	0C0000-0C0001     W   -------- xxxxxxxx    Sound I/O
	0D0000-0D0001   R     xxxxxxxx xxxxxxxx    External inputs
	0E0000-0E0001   R     xxxxxxxx xxxxxxxx    External inputs
	0F0000-0F0001   R     xxxxxxxx xxxxxxxx    External inputs
	========================================================================
	Interrupts:
		NMI ???
		INT generated by CTC
	========================================================================
	NOTE: Pigskin and Tri-Sports have similar memory maps; the addresses
			are simply shuffled around
	========================================================================

***************************************************************************/

/*
 * ported to v0.37b7
 * using automatic conversion tool v0.01
 */ 
package gr.codebb.arcadeflex.v037b7.drivers;

import gr.codebb.arcadeflex.common.PtrLib.UBytePtr;
import static gr.codebb.arcadeflex.v036.machine._6821pia.*;
import static gr.codebb.arcadeflex.v036.mame.common.*;
import static gr.codebb.arcadeflex.v036.mame.commonH.*;
import static gr.codebb.arcadeflex.v036.mame.driverH.*;
import static gr.codebb.arcadeflex.v036.mame.inputH.*;
import static gr.codebb.arcadeflex.v036.mame.mame.Machine;
import static gr.codebb.arcadeflex.v036.mame.sndintrfH.*;
import static gr.codebb.arcadeflex.v037b7.mame.inptport.*;
import static gr.codebb.arcadeflex.v037b7.mame.inptportH.*;
import static gr.codebb.arcadeflex.v037b7.mame.drawgfxH.*;
import static gr.codebb.arcadeflex.v037b7.mame.memoryH.*;
import static gr.codebb.arcadeflex.v037b7.mame.memory.*;
import static gr.codebb.arcadeflex.v037b7.mame.palette.*;
import static gr.codebb.arcadeflex.v037b7.sndhrdw.mcrH.*;
import static arcadeflex.v036.vidhrdw.generic.*;
import static gr.codebb.arcadeflex.v037b7.machine.mcr.*;
import static gr.codebb.arcadeflex.v037b7.vidhrdw.mcr68.*;
import static gr.codebb.arcadeflex.v037b7.mame.cpuintrf.*;
import static gr.codebb.arcadeflex.v036.mame.memoryH.COMBINE_WORD;
import static common.libc.cstring.*;
import static gr.codebb.arcadeflex.v036.machine._6812piaH.*;

public class mcr68
{
/*TODO*///	
/*TODO*///	
/*TODO*///	extern UINT8 mcr68_sprite_clip;
/*TODO*///	extern INT8 mcr68_sprite_xoffset;
/*TODO*///	
	static UBytePtr control_word=new UBytePtr();
	
	
	
	
	
	
	/*************************************
	 *
	 *	Zwackery-specific handlers
	 *
	 *************************************/
	
	public static ReadHandlerPtr zwackery_port_2_r  = new ReadHandlerPtr() { public int handler(int offset)
	{
		int result = input_port_2_r.handler(offset);
		int wheel = input_port_5_r.handler(offset);
	
		return result | ((wheel >> 2) & 0x3e);
	} };
	
	
	public static ReadHandlerPtr zwackery_6840_r  = new ReadHandlerPtr() { public int handler(int offset)
	{
		/* Zwackery does a timer test:                          */
		/* It loads $1388 into one of the timers clocked by E   */
		/* Then it sits in a tight loop counting down from $4E4 */
		/*       BTST #$1,($2,A0)                               */
		/*       DBNE D1,*-6                                    */
		/* It expects D1 to end up between 0 and 5; in order to */
		/* make this happen, we must assume that reads from the */
		/* 6840 take 14 additional cycles                       */
		cpuintf[Machine.drv.cpu[0].cpu_type & ~CPU_FLAGS_MASK].icount[0] -= 14;
		return mcr68_6840_upper_r.handler(offset);
	} };
	
	
	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Xenophobe-specific handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	public static WriteHandlerPtr xenophobe_control_w = new WriteHandlerPtr() {public void handler(int offset, int data)
/*TODO*///	{
/*TODO*///		int oldword = READ_WORD(&control_word[offset]);
/*TODO*///		int newword = COMBINE_WORD(oldword, data);
/*TODO*///		WRITE_WORD(&control_word[offset], newword);
/*TODO*///	
/*TODO*///	/*	soundsgood_reset_w(~newword & 0x0020);*/
/*TODO*///		soundsgood_data_w(offset, ((newword & 0x000f) << 1) | ((newword & 0x0010) >> 4));
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Blasted-specific handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	public static WriteHandlerPtr blasted_control_w = new WriteHandlerPtr() {public void handler(int offset, int data)
/*TODO*///	{
/*TODO*///		int oldword = READ_WORD(&control_word[offset]);
/*TODO*///		int newword = COMBINE_WORD(oldword, data);
/*TODO*///		WRITE_WORD(&control_word[offset], newword);
/*TODO*///	
/*TODO*///	/*	soundsgood_reset_w(~newword & 0x0020);*/
/*TODO*///		soundsgood_data_w(offset, (newword >> 8) & 0x1f);
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Spy Hunter 2-specific handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr spyhunt2_port_0_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		int result = input_port_0_r.handler(offset);
/*TODO*///		int which = (READ_WORD(control_word) >> 3) & 3;
/*TODO*///		int analog = readinputport(3 + which);
/*TODO*///		return result | ((soundsgood_status_r(0) & 1) << 5) | (analog << 8);
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr spyhunt2_port_1_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		int result = input_port_1_r.handler(offset);
/*TODO*///		return result | ((turbocs_status_r(0) & 1) << 7);
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	public static WriteHandlerPtr spyhunt2_control_w = new WriteHandlerPtr() {public void handler(int offset, int data)
/*TODO*///	{
/*TODO*///		int oldword = READ_WORD(&control_word[offset]);
/*TODO*///		int newword = COMBINE_WORD(oldword, data);
/*TODO*///		WRITE_WORD(&control_word[offset], newword);
/*TODO*///	
/*TODO*///	/* 	turbocs_reset_w(~newword & 0x0080);*/
/*TODO*///		turbocs_data_w(offset, (newword >> 8) & 0x001f);
/*TODO*///	
/*TODO*///	/*	soundsgood_reset_w(~newword & 0x2000);*/
/*TODO*///		soundsgood_data_w(offset, (newword >> 8) & 0x001f);
/*TODO*///	} };
	
	
	
	/*************************************
	 *
	 *	Arch Rivals-specific handlers
	 *
	 *************************************/
	
	public static ReadHandlerPtr archrivl_port_1_r  = new ReadHandlerPtr() { public int handler(int offset)
	{
		int joystick = input_port_3_r.handler(offset);
		int result = 0;
	
		/* each axis of the 49-way joystick is mapped like this:*/
		/*      0 8      = neutral                              */
		/*      1        = slightly left/up                     */
		/*      2 3      = middle left/up                       */
		/*      4 5 6 7  = full left/up                         */
		/*      C        = slightly right/down                  */
		/*      A E      = middle right/down                    */
		/*      9 B D F  = full right/down                      */
	
		if ((joystick & 0x0001) != 0) result |= 0x0040;
		else if ((joystick & 0x0002) != 0) result |= 0x0090;
	
		if ((joystick & 0x0004) != 0) result |= 0x0004;
		else if ((joystick & 0x0008) != 0) result |= 0x0009;
	
		if ((joystick & 0x0010) != 0) result |= 0x4000;
		else if ((joystick & 0x0020) != 0) result |= 0x9000;
	
		if ((joystick & 0x0040) != 0) result |= 0x0400;
		else if ((joystick & 0x0080) != 0) result |= 0x0900;
	
		return result;
	} };
	
	
	public static WriteHandlerPtr archrivl_control_w = new WriteHandlerPtr() {public void handler(int offset, int data)
	{
		int oldword = control_word.READ_WORD(offset);
		int newword = COMBINE_WORD(oldword, data);
		control_word.WRITE_WORD(offset, newword);
	
/*TODO*///		williams_cvsd_reset_w(~newword & 0x0400);
/*TODO*///		williams_cvsd_data_w(offset, newword & 0x3ff);
	} };
	
	
	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Pigskin-specific handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	static UINT8 protection_data[5];
/*TODO*///	public static WriteHandlerPtr pigskin_protection_w = new WriteHandlerPtr() {public void handler(int offset, int data)
/*TODO*///	{
/*TODO*///		/* ignore upper-byte only */
/*TODO*///		if ((data & 0x00ff0000) != 0) return;
/*TODO*///	
/*TODO*///		/* track the last 5 bytes */
/*TODO*///		protection_data[0] = protection_data[1];
/*TODO*///		protection_data[1] = protection_data[2];
/*TODO*///		protection_data[2] = protection_data[3];
/*TODO*///		protection_data[3] = protection_data[4];
/*TODO*///		protection_data[4] = data;
/*TODO*///	
/*TODO*///		logerror("%06X:protection_w=%02X\n", cpu_getpreviouspc(), data & 0xff);
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr pigskin_protection_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		/* based on the last 5 bytes return a value */
/*TODO*///		if (protection_data[4] == 0xe3 && protection_data[3] == 0x94)
/*TODO*///			return 0x00;	/* must be <= 1 */
/*TODO*///		if (protection_data[4] == 0xc7 && protection_data[3] == 0x7b && protection_data[2] == 0x36)
/*TODO*///			return 0x00;	/* must be <= 1 */
/*TODO*///		if (protection_data[4] == 0xc7 && protection_data[3] == 0x7b)
/*TODO*///			return 0x07;	/* must be > 5 */
/*TODO*///		if (protection_data[4] == 0xc7 && protection_data[3] == 0x1f && protection_data[2] == 0x03 &&
/*TODO*///			protection_data[1] == 0x25 && protection_data[0] == 0x36)
/*TODO*///			return 0x00;	/* must be < 3 */
/*TODO*///	
/*TODO*///		logerror("Protection read after unrecognized sequence: %02X %02X %02X %02X %02X\n",
/*TODO*///				protection_data[0], protection_data[1], protection_data[2], protection_data[3], protection_data[4]);
/*TODO*///	
/*TODO*///		return 0x00;
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr pigskin_port_1_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		int joystick = input_port_3_r.handler(offset);
/*TODO*///		int result = input_port_1_r.handler(offset);
/*TODO*///	
/*TODO*///		/* see archrivl_port_1_r for 49-way joystick description */
/*TODO*///	
/*TODO*///		if ((joystick & 0x0001) != 0) result |= 0x4000;
/*TODO*///		else if ((joystick & 0x0002) != 0) result |= 0x9000;
/*TODO*///	
/*TODO*///		if ((joystick & 0x0004) != 0) result |= 0x0400;
/*TODO*///		else if ((joystick & 0x0008) != 0) result |= 0x0900;
/*TODO*///	
/*TODO*///		return result;
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr pigskin_port_2_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		int joystick = input_port_3_r.handler(offset);
/*TODO*///		int result = input_port_2_r.handler(offset);
/*TODO*///	
/*TODO*///		/* see archrivl_port_1_r for 49-way joystick description */
/*TODO*///	
/*TODO*///		if ((joystick & 0x0010) != 0) result |= 0x4000;
/*TODO*///		else if ((joystick & 0x0020) != 0) result |= 0x9000;
/*TODO*///	
/*TODO*///		if ((joystick & 0x0040) != 0) result |= 0x0400;
/*TODO*///		else if ((joystick & 0x0080) != 0) result |= 0x0900;
/*TODO*///	
/*TODO*///		return result;
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Tri-Sports-specific handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	public static ReadHandlerPtr trisport_port_1_r  = new ReadHandlerPtr() { public int handler(int offset)
/*TODO*///	{
/*TODO*///		int xaxis = (INT8)input_port_3_r.handler(offset);
/*TODO*///		int yaxis = (INT8)input_port_4_r.handler(offset);
/*TODO*///		int result = input_port_1_r.handler(offset);
/*TODO*///	
/*TODO*///		result |= (xaxis & 0x3c) << 6;
/*TODO*///		result |= (yaxis & 0x3c) << 10;
/*TODO*///	
/*TODO*///		return result;
/*TODO*///	} };
	
	
	
	/*************************************
	 *
	 *	Main CPU memory handlers
	 *
	 *************************************/
	
	static MemoryReadAddress mcr68_readmem[] =
	{
		new MemoryReadAddress( 0x000000, 0x03ffff, MRA_ROM ),
		new MemoryReadAddress( 0x060000, 0x063fff, MRA_BANK2 ),
		new MemoryReadAddress( 0x070000, 0x070fff, MRA_BANK3 ),
		new MemoryReadAddress( 0x071000, 0x071fff, MRA_BANK4 ),
		new MemoryReadAddress( 0x080000, 0x080fff, MRA_BANK5 ),
		new MemoryReadAddress( 0x0a0000, 0x0a000f, mcr68_6840_upper_r ),
		new MemoryReadAddress( 0x0d0000, 0x0dffff, input_port_0_r ),
		new MemoryReadAddress( 0x0e0000, 0x0effff, input_port_1_r ),
		new MemoryReadAddress( 0x0f0000, 0x0fffff, input_port_2_r ),
		new MemoryReadAddress( -1 )  /* end of table */
	};
	
	
	static MemoryWriteAddress mcr68_writemem[] =
	{
		new MemoryWriteAddress( 0x000000, 0x03ffff, MWA_ROM ),
		new MemoryWriteAddress( 0x060000, 0x063fff, MWA_BANK2 ),
		new MemoryWriteAddress( 0x070000, 0x070fff, mcr68_videoram_w, videoram, videoram_size ),
		new MemoryWriteAddress( 0x071000, 0x071fff, MWA_BANK4 ),
		new MemoryWriteAddress( 0x080000, 0x080fff, MWA_BANK5, spriteram, spriteram_size ),
		new MemoryWriteAddress( 0x090000, 0x09007f, mcr68_paletteram_w, paletteram ),
		new MemoryWriteAddress( 0x0a0000, 0x0a000f, mcr68_6840_upper_w ),
		new MemoryWriteAddress( 0x0b0000, 0x0bffff, watchdog_reset_w ),
		new MemoryWriteAddress( 0x0c0000, 0x0cffff, MWA_NOP, control_word ),
		new MemoryWriteAddress( -1 )  /* end of table */
	};
	
	
	
	/*************************************
	 *
	 *	Zwackery main CPU memory handlers
	 *
	 *************************************/
	
	static MemoryReadAddress zwackery_readmem[] =
	{
		new MemoryReadAddress( 0x000000, 0x037fff, MRA_ROM ),
		new MemoryReadAddress( 0x080000, 0x080fff, MRA_BANK2 ),
		new MemoryReadAddress( 0x084000, 0x084fff, MRA_BANK3 ),
		new MemoryReadAddress( 0x100000, 0x10000f, zwackery_6840_r ),
		new MemoryReadAddress( 0x104000, 0x104007, pia_2_r ),
		new MemoryReadAddress( 0x108000, 0x108007, pia_3_r ),
		new MemoryReadAddress( 0x10c000, 0x10c007, pia_4_r ),
		new MemoryReadAddress( 0x800000, 0x800fff, MRA_BANK4 ),
		new MemoryReadAddress( 0x802000, 0x803fff, paletteram_word_r ),
		new MemoryReadAddress( 0xc00000, 0xc00fff, MRA_BANK5 ),
		new MemoryReadAddress( -1 )  /* end of table */
	};
	
	
	static MemoryWriteAddress zwackery_writemem[] =
	{
		new MemoryWriteAddress( 0x000000, 0x037fff, MWA_ROM ),
		new MemoryWriteAddress( 0x080000, 0x080fff, MWA_BANK2 ),
		new MemoryWriteAddress( 0x084000, 0x084fff, MWA_BANK3 ),
		new MemoryWriteAddress( 0x100000, 0x10000f, mcr68_6840_upper_w ),
		new MemoryWriteAddress( 0x104000, 0x104007, pia_2_w ),
		new MemoryWriteAddress( 0x108000, 0x108007, pia_3_w ),
		new MemoryWriteAddress( 0x10c000, 0x10c007, pia_4_w ),
		new MemoryWriteAddress( 0x800000, 0x800fff, zwackery_videoram_w, videoram, videoram_size ),
		new MemoryWriteAddress( 0x802000, 0x803fff, zwackery_paletteram_w, paletteram ),
		new MemoryWriteAddress( 0xc00000, 0xc00fff, zwackery_spriteram_w, spriteram, spriteram_size ),
		new MemoryWriteAddress( -1 )  /* end of table */
	};
	
	
	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Pigskin CPU memory handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	static MemoryReadAddress pigskin_readmem[] =
/*TODO*///	{
/*TODO*///		new MemoryReadAddress( 0x000000, 0x03ffff, MRA_ROM ),
/*TODO*///		new MemoryReadAddress( 0x080000, 0x08ffff, pigskin_port_1_r ),
/*TODO*///		new MemoryReadAddress( 0x0a0000, 0x0affff, pigskin_port_2_r ),
/*TODO*///		new MemoryReadAddress( 0x100000, 0x100fff, MRA_BANK2 ),
/*TODO*///		new MemoryReadAddress( 0x120000, 0x120001, pigskin_protection_r ),
/*TODO*///		new MemoryReadAddress( 0x140000, 0x143fff, MRA_BANK3 ),
/*TODO*///		new MemoryReadAddress( 0x160000, 0x1607ff, MRA_BANK4 ),
/*TODO*///		new MemoryReadAddress( 0x180000, 0x18000f, mcr68_6840_upper_r ),
/*TODO*///		new MemoryReadAddress( 0x1e0000, 0x1effff, input_port_0_r ),
/*TODO*///		new MemoryReadAddress( -1 )  /* end of table */
/*TODO*///	};
/*TODO*///	
/*TODO*///	
/*TODO*///	static MemoryWriteAddress pigskin_writemem[] =
/*TODO*///	{
/*TODO*///		new MemoryWriteAddress( 0x000000, 0x03ffff, MWA_ROM ),
/*TODO*///		new MemoryWriteAddress( 0x0c0000, 0x0c007f, mcr68_paletteram_w, paletteram ),
/*TODO*///		new MemoryWriteAddress( 0x0e0000, 0x0effff, watchdog_reset_w ),
/*TODO*///		new MemoryWriteAddress( 0x100000, 0x100fff, mcr68_videoram_w, videoram, videoram_size ),
/*TODO*///		new MemoryWriteAddress( 0x120000, 0x120001, pigskin_protection_w ),
/*TODO*///		new MemoryWriteAddress( 0x140000, 0x143fff, MWA_BANK3 ),
/*TODO*///		new MemoryWriteAddress( 0x160000, 0x1607ff, MWA_BANK4, spriteram, spriteram_size ),
/*TODO*///		new MemoryWriteAddress( 0x180000, 0x18000f, mcr68_6840_upper_w ),
/*TODO*///		new MemoryWriteAddress( 0x1a0000, 0x1affff, MWA_NOP, control_word ),
/*TODO*///		new MemoryWriteAddress( -1 )  /* end of table */
/*TODO*///	};
/*TODO*///	
/*TODO*///	
/*TODO*///	
/*TODO*///	/*************************************
/*TODO*///	 *
/*TODO*///	 *	Tri-Sports CPU memory handlers
/*TODO*///	 *
/*TODO*///	 *************************************/
/*TODO*///	
/*TODO*///	static MemoryReadAddress trisport_readmem[] =
/*TODO*///	{
/*TODO*///		new MemoryReadAddress( 0x000000, 0x03ffff, MRA_ROM ),
/*TODO*///		new MemoryReadAddress( 0x080000, 0x08ffff, trisport_port_1_r ),
/*TODO*///		new MemoryReadAddress( 0x0a0000, 0x0affff, input_port_2_r ),
/*TODO*///		new MemoryReadAddress( 0x100000, 0x103fff, MRA_BANK2 ),
/*TODO*///		new MemoryReadAddress( 0x140000, 0x1407ff, MRA_BANK3 ),
/*TODO*///		new MemoryReadAddress( 0x160000, 0x160fff, MRA_BANK4 ),
/*TODO*///		new MemoryReadAddress( 0x180000, 0x18000f, mcr68_6840_upper_r ),
/*TODO*///		new MemoryReadAddress( 0x1e0000, 0x1effff, input_port_0_r ),
/*TODO*///		new MemoryReadAddress( -1 )  /* end of table */
/*TODO*///	};
/*TODO*///	
/*TODO*///	
/*TODO*///	static MemoryWriteAddress trisport_writemem[] =
/*TODO*///	{
/*TODO*///		new MemoryWriteAddress( 0x000000, 0x03ffff, MWA_ROM ),
/*TODO*///		new MemoryWriteAddress( 0x100000, 0x103fff, MWA_BANK2 ),
/*TODO*///		new MemoryWriteAddress( 0x120000, 0x12007f, mcr68_paletteram_w, paletteram ),
/*TODO*///		new MemoryWriteAddress( 0x140000, 0x1407ff, MWA_BANK3, spriteram, spriteram_size ),
/*TODO*///		new MemoryWriteAddress( 0x160000, 0x160fff, mcr68_videoram_w, videoram, videoram_size ),
/*TODO*///		new MemoryWriteAddress( 0x180000, 0x18000f, mcr68_6840_upper_w ),
/*TODO*///		new MemoryWriteAddress( 0x1a0000, 0x1affff, MWA_NOP, control_word ),
/*TODO*///		new MemoryWriteAddress( 0x1c0000, 0x1cffff, watchdog_reset_w ),
/*TODO*///		new MemoryWriteAddress( -1 )  /* end of table */
/*TODO*///	};
	
	
	
	/*************************************
	 *
	 *	Port definitions
	 *
	 *************************************/
	
	static InputPortPtr input_ports_zwackery = new InputPortPtr(){ public void handler() { 
		PORT_START(); 
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_SERVICE( 0x0010, IP_ACTIVE_LOW );
		PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_COIN4 );
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_TILT );
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_BUTTON1 );/* sword */
	
		PORT_START(); 
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY );
		PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY );
		PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY );
		PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY );
		PORT_BIT( 0xf0, IP_ACTIVE_HIGH, IPT_UNUSED );/* sound communications */
	
		PORT_START(); 
		PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_BUTTON3 );/* spell up */
		PORT_BIT( 0x3e, IP_ACTIVE_HIGH, IPT_UNUSED );/* encoder wheel */
		PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_BUTTON2 );/* shield */
		PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_BUTTON4 );/* spell down */
	
		PORT_START(); 
		PORT_BIT( 0xff, IP_ACTIVE_LOW, IPT_UNUSED );
	
		PORT_START(); 
		PORT_DIPNAME( 0x07, 0x00, DEF_STR( "Coinage") );
		PORT_DIPSETTING(    0x05, DEF_STR( "6C_1C") );
		PORT_DIPSETTING(    0x04, DEF_STR( "5C_1C") );
		PORT_DIPSETTING(    0x03, DEF_STR( "4C_1C") );
		PORT_DIPSETTING(    0x02, DEF_STR( "3C_1C") );
		PORT_DIPSETTING(    0x01, DEF_STR( "2C_1C") );
		PORT_DIPSETTING(    0x00, DEF_STR( "1C_1C") );
		PORT_DIPSETTING(    0x06, DEF_STR( "1C_2C") );
		PORT_DIPSETTING(    0x07, DEF_STR( "Free_Play") );
		PORT_DIPNAME( 0x38, 0x00, "Buy-in" );
		PORT_DIPSETTING(    0x00, "1 coin" );
		PORT_DIPSETTING(    0x08, "2 coins" );
		PORT_DIPSETTING(    0x10, "3 coins" );
		PORT_DIPSETTING(    0x18, "4 coins" );
		PORT_DIPSETTING(    0x20, "5 coins" );
		PORT_DIPSETTING(    0x28, "6 coins" );
		PORT_DIPSETTING(    0x30, "7 coins" );
		PORT_DIPSETTING(    0x38, "None" );
		PORT_DIPNAME( 0xc0, 0x00, DEF_STR( "Difficulty") );
		PORT_DIPSETTING(    0xc0, "Easier" );
		PORT_DIPSETTING(    0x00, "Normal" );
		PORT_DIPSETTING(    0x40, "Harder" );
		PORT_DIPSETTING(    0x80, "Hardest" );
	
		PORT_START(); 
		PORT_ANALOGX( 0xff, 0x00, IPT_DIAL | IPF_REVERSE, 50, 10, 0, 0, KEYCODE_Z, KEYCODE_X, 0, 0 );
	INPUT_PORTS_END(); }}; 
	
	
/*TODO*///	static InputPortPtr input_ports_xenophob = new InputPortPtr(){ public void handler() { 
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_COIN3 );
/*TODO*///		PORT_BIT( 0x0018, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_UNKNOWN );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_TILT );
/*TODO*///		PORT_SERVICE( 0x0080, IP_ACTIVE_LOW );
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER3 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0003, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_DIPNAME( 0x0004, 0x0004, DEF_STR( "Free_Play") );
/*TODO*///		PORT_DIPSETTING(      0x0004, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x0008, 0x0008, "Coins per Life Unit" );
/*TODO*///		PORT_DIPSETTING(      0x0008, "1" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "2" );
/*TODO*///		PORT_DIPNAME( 0x0010, 0x0010, "Life Unit" );
/*TODO*///		PORT_DIPSETTING(      0x0010, "1000" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "2000" );
/*TODO*///		PORT_DIPNAME( 0x0020, 0x0020, DEF_STR( "Demo_Sounds") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0020, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x00c0, 0x0000, DEF_STR( "Difficulty") );
/*TODO*///		PORT_DIPSETTING(      0x0040, "Easy" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Medium" );
/*TODO*///		PORT_DIPSETTING(      0x0080, "Hard" );
/*TODO*///	/*	PORT_DIPSETTING(      0x00c0, "Medium" );/
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	INPUT_PORTS_END(); }}; 
/*TODO*///	
/*TODO*///	
/*TODO*///	static InputPortPtr input_ports_spyhunt2 = new InputPortPtr(){ public void handler() { 
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_START1 );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_START2 );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_TILT );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_HIGH, IPT_UNKNOWN );/* SG status */
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_SERVICE );
/*TODO*///		PORT_SERVICE( 0x0080, IP_ACTIVE_LOW );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_HIGH, IPT_UNKNOWN );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_BUTTON5 | IPF_PLAYER2 );/* 1st gear */
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_BUTTON6 | IPF_PLAYER2 );/* 2nd gear */
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_BUTTON7 | IPF_PLAYER2 );/* 3rd gear */
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_BUTTON5 | IPF_PLAYER1 );/* 1st gear */
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_BUTTON6 | IPF_PLAYER1 );/* 2nd gear */
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_BUTTON7 | IPF_PLAYER1 );/* 3rd gear */
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_HIGH, IPT_UNUSED );              /* TCS status */
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER2 );/* Left Trigger */
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER2 );/* Left Button */
/*TODO*///		PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );/* Right Trigger */
/*TODO*///		PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_BUTTON4 | IPF_PLAYER2 );/* Right Button */
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER1 );/* Left Trigger */
/*TODO*///		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER1 );/* Left Button */
/*TODO*///		PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );/* Right Trigger */
/*TODO*///		PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_BUTTON4 | IPF_PLAYER1 );/* Right Button */
/*TODO*///	
/*TODO*///		PORT_START(); 	/* IN3 -- dipswitches */
/*TODO*///		PORT_DIPNAME( 0x0003, 0x0003, DEF_STR( "Coinage") );
/*TODO*///		PORT_DIPSETTING(      0x0002, DEF_STR( "2C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0003, DEF_STR( "1C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0001, DEF_STR( "1C_2C") );
/*TODO*///		/*PORT_DIPSETTING(      0x0000, DEF_STR( "1C_2C") );*/
/*TODO*///		PORT_DIPNAME( 0x0004, 0x0004, DEF_STR( "Free_Play") );
/*TODO*///		PORT_DIPSETTING(      0x0004, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x0018, 0x0008, "Point Threshholds" );
/*TODO*///		PORT_DIPSETTING(      0x0008, "Easy" );
/*TODO*///		PORT_DIPSETTING(      0x0018, "Medium" );
/*TODO*///		PORT_DIPSETTING(      0x0010, "Hard" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Hardest" );
/*TODO*///		PORT_DIPNAME( 0x0060, 0x0060, "Free Timer After" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "30 sec" );
/*TODO*///		PORT_DIPSETTING(      0x0040, "45 sec" );
/*TODO*///		PORT_DIPSETTING(      0x0060, "60 sec" );
/*TODO*///		PORT_DIPSETTING(      0x0020, "90 sec" );
/*TODO*///		PORT_BITX( 0x0080,    0x0080, IPT_DIPSWITCH_NAME | IPF_CHEAT, "Rack Advance", KEYCODE_F1, IP_JOY_NONE );
/*TODO*///		PORT_DIPSETTING(      0x0080, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 	/* analog ports for steering and pedals */
/*TODO*///		PORT_ANALOG( 0xff, 0x30, IPT_PEDAL | IPF_PLAYER2 | IPF_REVERSE, 100, 10, 0x30, 0xff );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_ANALOG( 0xff, 0x30, IPT_PEDAL | IPF_PLAYER1 | IPF_REVERSE, 100, 10, 0x30, 0xff );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_ANALOG( 0xff, 0x80, IPT_PADDLE | IPF_PLAYER2 | IPF_REVERSE, 80, 10, 0x10, 0xf0 );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_ANALOG( 0xff, 0x80, IPT_PADDLE | IPF_PLAYER1 | IPF_REVERSE, 80, 10, 0x10, 0xf0 );
/*TODO*///	INPUT_PORTS_END(); }}; 
/*TODO*///	
/*TODO*///	
/*TODO*///	static InputPortPtr input_ports_blasted = new InputPortPtr(){ public void handler() { 
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_UNUSED/* credit w/bill */ );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_TILT );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_COIN4 );
/*TODO*///		PORT_SERVICE( 0x0080, IP_ACTIVE_LOW );
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_START1 );
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_START2 );
/*TODO*///		PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_UNUSED/* credit 1 w/bill */ );
/*TODO*///		PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_UNUSED/* credit 2 w/bill */ );
/*TODO*///		PORT_BIT( 0xf000, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_DIPNAME( 0x0003, 0x0003, DEF_STR( "Coinage") );
/*TODO*///		PORT_DIPSETTING(      0x0002, DEF_STR( "2C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0003, DEF_STR( "1C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0001, DEF_STR( "1C_2C") );
/*TODO*///		/*PORT_DIPSETTING(      0x0000, DEF_STR( "1C_2C") );*/
/*TODO*///		PORT_DIPNAME( 0x000c, 0x0000, DEF_STR( "Difficulty") );
/*TODO*///		PORT_DIPSETTING(      0x0008, "Easy" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Medium" );
/*TODO*///		PORT_DIPSETTING(      0x0004, "Hard" );
/*TODO*///	/*	PORT_DIPSETTING(      0x000c, "Medium" );/
/*TODO*///		PORT_DIPNAME( 0x0020, 0x0020, "Dollar Receptor" );
/*TODO*///		PORT_DIPSETTING(      0x0020, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x0040, 0x0040, DEF_STR( "Demo_Sounds") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0040, DEF_STR( "On") );
/*TODO*///		PORT_BITX( 0x0080,    0x0080, IPT_DIPSWITCH_NAME | IPF_CHEAT, "Rack Advance", KEYCODE_F1, IP_JOY_NONE );
/*TODO*///		PORT_DIPSETTING(      0x0080, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	INPUT_PORTS_END(); }}; 
	
	
	static InputPortPtr input_ports_archrivl = new InputPortPtr(){ public void handler() { 
		PORT_START(); 
		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
		PORT_BIT( 0x000c, IP_ACTIVE_LOW, IPT_UNUSED );
		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_TILT );
		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_UNUSED );
		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_COIN4 );
		PORT_SERVICE( 0x0080, IP_ACTIVE_LOW );
		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_START1 );
		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_START2 );
		PORT_BIT( 0x0c00, IP_ACTIVE_LOW, IPT_UNUSED );
		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );
		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER1 );
		PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );
		PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER2 );
	
		PORT_START(); 
		PORT_BIT( 0xffff, IP_ACTIVE_HIGH, IPT_UNUSED );/* player 1/2 joysticks go here */
	
		PORT_START(); 
		PORT_DIPNAME( 0x0003, 0x0003, "Game Time" );
		PORT_DIPSETTING(      0x0003, "Preset Time" );
		PORT_DIPSETTING(      0x0002, "Preset + 10sec" );
		PORT_DIPSETTING(      0x0001, "Preset + 20sec" );
		PORT_DIPSETTING(      0x0000, "Preset + 30sec" );
		PORT_DIPNAME( 0x001c, 0x001c, DEF_STR( "Coinage") );
		PORT_DIPSETTING(      0x0014, DEF_STR( "3C_1C") );
		PORT_DIPSETTING(      0x0018, DEF_STR( "2C_1C") );
		PORT_DIPSETTING(      0x001c, DEF_STR( "1C_1C") );
		PORT_DIPSETTING(      0x0010, DEF_STR( "2C_3C") );
		PORT_DIPSETTING(      0x000c, DEF_STR( "1C_2C") );
		PORT_DIPSETTING(      0x0008, DEF_STR( "1C_3C") );
		PORT_DIPSETTING(      0x0004, DEF_STR( "1C_5C") );
		PORT_DIPSETTING(      0x0000, DEF_STR( "1C_6C") );
		PORT_DIPNAME( 0x0020, 0x0020, "Team Names" );
		PORT_DIPSETTING(      0x0020, "Default" );
		PORT_DIPSETTING(      0x0000, "Hometown Heroes" );
		PORT_DIPNAME( 0x0040, 0x0040, DEF_STR( "Demo_Sounds") );
		PORT_DIPSETTING(      0x0000, DEF_STR( "Off") );
		PORT_DIPSETTING(      0x0040, DEF_STR( "On") );
		PORT_DIPNAME( 0x0080, 0x0080, DEF_STR( "Free_Play") );
		PORT_DIPSETTING(      0x0080, DEF_STR( "Off") );
		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
	
		PORT_START(); 	/* 49-way joystick simulator */
		PORT_BIT( 0x0001, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER1 );
		PORT_BIT( 0x0002, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER1 );
		PORT_BIT( 0x0004, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER1 );
		PORT_BIT( 0x0008, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER1 );
		PORT_BIT( 0x0010, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x0020, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x0040, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER2 );
		PORT_BIT( 0x0080, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER2 );
	INPUT_PORTS_END(); }}; 
	
/*TODO*///	static InputPortPtr input_ports_pigskin = new InputPortPtr(){ public void handler() { 
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_LOW, IPT_START1 );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_LOW, IPT_START2 );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_TILT );
/*TODO*///		PORT_SERVICE( 0x0020, IP_ACTIVE_LOW );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_COIN4 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_UNKNOWN );
/*TODO*///		PORT_BIT( 0x0100, IP_ACTIVE_LOW, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0200, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0400, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0800, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x4000, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x8000, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x000f, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_BUTTON3 | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_HIGH, IPT_UNUSED );/* player 1 joystick goes here */
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_DIPNAME( 0x0003, 0x0003, "Game Time" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Shortest" );
/*TODO*///		PORT_DIPSETTING(      0x0002, "Short" );
/*TODO*///		PORT_DIPSETTING(      0x0003, "Medium" );
/*TODO*///		PORT_DIPSETTING(      0x0001, "Long" );
/*TODO*///		PORT_DIPNAME( 0x000c, 0x000c, DEF_STR( "Coinage") );
/*TODO*///		PORT_DIPSETTING(      0x0008, DEF_STR( "2C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x000c, DEF_STR( "1C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "Free_Play") );
/*TODO*///		PORT_DIPSETTING(      0x0004, "Set Your Own" );
/*TODO*///		PORT_DIPNAME( 0x0010, 0x0010, DEF_STR( "Demo_Sounds") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0010, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x0020, 0x0020, "Test Switch" );
/*TODO*///		PORT_DIPSETTING(      0x0020, DEF_STR( "Off") );
/*TODO*///		PORT_DIPSETTING(      0x0000, DEF_STR( "On") );
/*TODO*///		PORT_DIPNAME( 0x0040, 0x0040, "Coin Chutes" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Individual" );
/*TODO*///		PORT_DIPSETTING(      0x0040, "Common" );
/*TODO*///		PORT_DIPNAME( 0x0080, 0x0080, "Joystick" );
/*TODO*///		PORT_DIPSETTING(      0x0080, "Standard" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Rotated" );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_HIGH, IPT_UNUSED );/* player 2 joystick goes here */
/*TODO*///	
/*TODO*///		PORT_START(); 	/* 49-way joystick simulator */
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0004, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0008, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0020, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_HIGH, IPT_JOYSTICK_UP | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_HIGH, IPT_JOYSTICK_DOWN | IPF_8WAY | IPF_PLAYER2 );
/*TODO*///	INPUT_PORTS_END(); }}; 
/*TODO*///	
/*TODO*///	
/*TODO*///	static InputPortPtr input_ports_trisport = new InputPortPtr(){ public void handler() { 
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x0001, IP_ACTIVE_LOW, IPT_COIN1 );
/*TODO*///		PORT_BIT( 0x0002, IP_ACTIVE_LOW, IPT_COIN2 );
/*TODO*///		PORT_BIT( 0x000c, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x0010, IP_ACTIVE_LOW, IPT_TILT );
/*TODO*///		PORT_SERVICE( 0x0020, IP_ACTIVE_LOW );
/*TODO*///		PORT_BIT( 0x0040, IP_ACTIVE_LOW, IPT_COIN4 );
/*TODO*///		PORT_BIT( 0x0080, IP_ACTIVE_LOW, IPT_UNKNOWN );
/*TODO*///		PORT_BIT( 0x0f00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_BUTTON1 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0x1000, IP_ACTIVE_LOW, IPT_START1 );
/*TODO*///		PORT_BIT( 0x2000, IP_ACTIVE_LOW, IPT_BUTTON2 | IPF_PLAYER1 );
/*TODO*///		PORT_BIT( 0xc000, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_BIT( 0x00ff, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_HIGH, IPT_UNUSED );/* analog controls go here */
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///		PORT_DIPNAME( 0x0007, 0x0007, DEF_STR( "Coinage") );
/*TODO*///		PORT_DIPSETTING(      0x0002, DEF_STR( "4C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0003, DEF_STR( "3C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0006, DEF_STR( "2C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0007, DEF_STR( "1C_1C") );
/*TODO*///		PORT_DIPSETTING(      0x0005, DEF_STR( "1C_2C") );
/*TODO*///		PORT_DIPSETTING(      0x0004, DEF_STR( "1C_3C") );
/*TODO*///		PORT_DIPSETTING(      0x0001, DEF_STR( "Free_Play") );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Battery Options" );
/*TODO*///		PORT_DIPNAME( 0x0018, 0x0018, "Pool Turns" );
/*TODO*///		PORT_DIPSETTING(      0x0010, "5" );
/*TODO*///		PORT_DIPSETTING(      0x0008, "6" );
/*TODO*///		PORT_DIPSETTING(      0x0018, "7" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "8" );
/*TODO*///		PORT_DIPNAME( 0x0020, 0x0020, "Bowling Difficulty" );
/*TODO*///		PORT_DIPSETTING(      0x0020, "Standard" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Advanced" );
/*TODO*///		PORT_DIPNAME( 0x0040, 0x0040, "Shot Timer" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "Slower" );
/*TODO*///		PORT_DIPSETTING(      0x0040, "Standard" );
/*TODO*///		PORT_DIPNAME( 0x0080, 0x0080, "Golf Holes" );
/*TODO*///		PORT_DIPSETTING(      0x0080, "3" );
/*TODO*///		PORT_DIPSETTING(      0x0000, "4" );
/*TODO*///		PORT_BIT( 0xff00, IP_ACTIVE_LOW, IPT_UNUSED );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///	    PORT_ANALOG( 0xff, 0, IPT_TRACKBALL_X | IPF_PLAYER1, 100, 20, 0, 0 );
/*TODO*///	
/*TODO*///		PORT_START(); 
/*TODO*///	    PORT_ANALOG( 0xff, 0, IPT_TRACKBALL_Y | IPF_REVERSE | IPF_PLAYER1, 100, 20, 0, 0 );
/*TODO*///	INPUT_PORTS_END(); }}; 
	
	
	
	/*************************************
	 *
	 *	Graphics definitions
	 *
	 *************************************/
	
	static GfxLayout zwackery_layout = new GfxLayout
	(
		16,16,
		RGN_FRAC(1,2),
		8,
		new int[] { 0, 0, 0, 0, 0, 0, 0, 0 },
		new int[] {  3,  2,  1,  0, 11, 10,  9,  8,
		  19, 18, 17, 16, 27, 26, 25, 24 },
		new int[] { 4, RGN_FRAC(1,2)+4, 0, RGN_FRAC(1,2)+0, 36, RGN_FRAC(1,2)+36, 32, RGN_FRAC(1,2)+32,
		  68, RGN_FRAC(1,2)+68, 64, RGN_FRAC(1,2)+64, 100, RGN_FRAC(1,2)+100, 96, RGN_FRAC(1,2)+96 },
		128
	);
	
	static GfxDecodeInfo gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( REGION_GFX1, 0, mcr_bg_layout,     0, 4 ),
		new GfxDecodeInfo( REGION_GFX2, 0, mcr_sprite_layout, 0, 4 ),
		new GfxDecodeInfo( -1 ) /* end of array */
	};
	
	static GfxDecodeInfo zwackery_gfxdecodeinfo[] =
	{
		new GfxDecodeInfo( REGION_GFX1, 0, zwackery_layout,       0, 16 ),
		new GfxDecodeInfo( REGION_GFX2, 0, mcr_sprite_layout, 0x800, 32 ),
		new GfxDecodeInfo( REGION_GFX1, 0, zwackery_layout,       0, 16 ),	/* yes, an extra copy */
		new GfxDecodeInfo( -1 ) /* end of array */
	};
	
	
	
	/*************************************
	 *
	 *	Machine drivers
	 *
	 *************************************/
	
	/*=================================================================
	
		Timing for these games is crucial. They all use the 6840 timer
		to preemptively multitask during each frame. The clock on the
		6840 timer is taken from the 68000's E clock, which runs at
		1/10th the speed of the 68000 itself.
	
		All the games run in a sequence of six steps per frame, using
		counter 1 on the 6840 to time each step. The sum total of the
		6 programmed steps for each game determines how many E clocks
		should be generated per frame, which in turn determines the
		clock we should expect the CPU to have.
	
		Ideal CPU timings, based on counter usage:
	
			Zwackery:     7652400
			Xenophobe:    7723800
			Spy Hunter 2: 7723800
			Blasted:      7798800
			Arch Rivals:  7799100
			Pigskin:      9211200
			Tri-Sports:   9211200
	
		Currently, we are using the Xenophobe CPU for the first four
		until we spot problems.
	
	=================================================================*/
        
        public static InitMachinePtr zwackery_init_machine = new InitMachinePtr() {
            public void handler() {
            System.out.println("zwackery_init_machine");
		/* for the most part all MCR/68k games are the same */
		mcr68_common_init();
		v493_callback = zwackery_493_callback;
	
		/* append our PIA state onto the existing one and reinit */
		pia_config(2, PIA_STANDARD_ORDERING | PIA_16BIT_UPPER, zwackery_pia_2_intf);
		pia_config(3, PIA_STANDARD_ORDERING | PIA_16BIT_LOWER, zwackery_pia_3_intf);
		pia_config(4, PIA_STANDARD_ORDERING | PIA_16BIT_LOWER, zwackery_pia_4_intf);
		pia_reset();
	
		/* vectors are 5 and 6 */
		v493_irq_vector = 5;
		m6840_irq_vector = 6;
	} };
	
	static MachineDriver machine_driver_zwackery = new MachineDriver
	(
		/* basic machine hardware */
		new MachineCPU[] {
			new MachineCPU(
				CPU_M68000,
				7652400,	/* 8 MHz */
				zwackery_readmem,zwackery_writemem,null,null,
				mcr68_interrupt,1
			)
                        ,SOUND_CPU_CHIP_SQUEAK_DELUXE
                        
		},
		30, DEFAULT_REAL_30HZ_VBLANK_DURATION,
		1,
		zwackery_init_machine,
	
		/* video hardware */
		32*16, 30*16, new rectangle( 0, 32*16-1, 0, 30*16-1 ),
		zwackery_gfxdecodeinfo,
		4096, 4096,
		zwackery_convert_color_prom,
	
		VIDEO_TYPE_RASTER | VIDEO_MODIFIES_PALETTE,
		null,
		generic_vh_start,
		generic_vh_stop,
		zwackery_vh_screenrefresh,
	
		/* sound hardware */
		SOUND_SUPPORTS_STEREO,0,0,0,
                new MachineSound[] {
			SOUND_CHIP_SQUEAK_DELUXE
		},
              
                
		null
	);
	
	
/*TODO*///	#define MACHINE_DRIVER_MCR68(NAME, MEMMAP, SOUND) 		\
/*TODO*///	static MachineDriver machine_driver_##NAME = new MachineDriver\
/*TODO*///	(														\
/*TODO*///		/* basic machine hardware */						\
/*TODO*///		new MachineCPU[] {													\
/*TODO*///			new MachineCPU(												\
/*TODO*///				CPU_M68000,									\
/*TODO*///				7723800,	/* 8 MHz */						\
/*TODO*///				MEMMAP##_readmem,MEMMAP##_writemem,null,null,		\
/*TODO*///				mcr68_interrupt,1							\
/*TODO*///			),												\
/*TODO*///			SOUND_CPU_##SOUND								\
/*TODO*///		},													\
/*TODO*///		30, DEFAULT_REAL_30HZ_VBLANK_DURATION,				\
/*TODO*///		1,													\
/*TODO*///		mcr68_init_machine,									\
/*TODO*///															\
/*TODO*///		/* video hardware */								\
/*TODO*///		32*16, 30*16, new rectangle( 0, 32*16-1, 0, 30*16-1 ),			\
/*TODO*///		gfxdecodeinfo,										\
/*TODO*///		8*16, 8*16,											\
/*TODO*///		null,													\
/*TODO*///															\
/*TODO*///		VIDEO_TYPE_RASTER | VIDEO_MODIFIES_PALETTE,			\
/*TODO*///		null,													\
/*TODO*///		generic_vh_start,									\
/*TODO*///		generic_vh_stop,									\
/*TODO*///		mcr68_vh_screenrefresh,								\
/*TODO*///															\
/*TODO*///		/* sound hardware */								\
/*TODO*///		SOUND_SUPPORTS_STEREO,0,0,0,						\
/*TODO*///		new MachineSound[] {													\
/*TODO*///			SOUND_##SOUND									\
/*TODO*///		},													\
/*TODO*///		0													\
/*TODO*///	);
/*TODO*///	
/*TODO*///	MACHINE_DRIVER_MCR68(xenophob, mcr68,    SOUNDS_GOOD)
/*TODO*///	MACHINE_DRIVER_MCR68(spyhunt2, mcr68,    TURBO_CHIP_SQUEAK_PLUS_SOUNDS_GOOD)
/*TODO*///	MACHINE_DRIVER_MCR68(archrivl, mcr68,    WILLIAMS_CVSD)
        public static InitMachinePtr mcr68_init_machine = new InitMachinePtr() { public void handler() 
	{
		/* for the most part all MCR/68k games are the same */
		mcr68_common_init();
		v493_callback = mcr68_493_callback;
	
		/* vectors are 1 and 2 */
		v493_irq_vector = 1;
		m6840_irq_vector = 2;
	} };
        
	static MachineDriver machine_driver_archrivl = new MachineDriver
	(														
		/* basic machine hardware */						
		new MachineCPU[] {													
			new MachineCPU(												
				CPU_M68000,									
				7723800,	/* 8 MHz */						
				mcr68_readmem,mcr68_writemem,null,null,		
				mcr68_interrupt,1							
			)
/*TODO*///                        ,SOUND_CPU_WILLIAMS_CVSD								
		},													
		30, DEFAULT_REAL_30HZ_VBLANK_DURATION,				
		1,													
		mcr68_init_machine,									
															
		/* video hardware */								
		32*16, 30*16, new rectangle( 0, 32*16-1, 0, 30*16-1 ),			
		gfxdecodeinfo,										
		8*16, 8*16,											
		null,													
															
		VIDEO_TYPE_RASTER | VIDEO_MODIFIES_PALETTE,			
		null,													
		generic_vh_start,									
		generic_vh_stop,									
		mcr68_vh_screenrefresh,								
															
		/* sound hardware */								
		SOUND_SUPPORTS_STEREO,0,0,0,						
/*TODO*///		new MachineSound[] {													
/*TODO*///			SOUND_WILLIAMS_CVSD									
/*TODO*///		},
                null,
                
		null													
	);        
/*TODO*///	MACHINE_DRIVER_MCR68(pigskin,  pigskin,  WILLIAMS_CVSD)
/*TODO*///	MACHINE_DRIVER_MCR68(trisport, trisport, WILLIAMS_CVSD)
	
	
	
	/*************************************
	 *
	 *	ROM decoding
	 *
	 *************************************/
	
	static void rom_decode()
	{
		int i;
	
		/* tile graphics are inverted */
		for (i = 0; i < memory_region_length(REGION_GFX1); i++)
			memory_region(REGION_GFX1).write(i, memory_region(REGION_GFX1).read(i) ^ 0xff);
	}
	
	
	
	/*************************************
	 *
	 *	ROM definitions
	 *
	 *************************************/
	
	static RomLoadPtr rom_zwackery = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION( 0x40000, REGION_CPU1 );
		ROM_LOAD_EVEN( "pro0.bin",   0x00000, 0x4000, 0x6fb9731c );
		ROM_LOAD_ODD ( "pro1.bin",   0x00000, 0x4000, 0x84b92555 );
		ROM_LOAD_EVEN( "pro2.bin",   0x08000, 0x4000, 0xe6977a2a );
		ROM_LOAD_ODD ( "pro3.bin",   0x08000, 0x4000, 0xf5d0a60e );
		ROM_LOAD_EVEN( "pro4.bin",   0x10000, 0x4000, 0xec5841d9 );
		ROM_LOAD_ODD ( "pro5.bin",   0x10000, 0x4000, 0xd7d99ce0 );
		ROM_LOAD_EVEN( "pro6.bin",   0x18000, 0x4000, 0xb9fe7bf5 );
		ROM_LOAD_ODD ( "pro7.bin",   0x18000, 0x4000, 0x5e261b3b );
		ROM_LOAD_EVEN( "pro8.bin",   0x20000, 0x4000, 0x55e380a5 );
		ROM_LOAD_ODD ( "pro9.bin",   0x20000, 0x4000, 0x12249dca );
		ROM_LOAD_EVEN( "pro10.bin",  0x28000, 0x4000, 0x6a39a8ca );
		ROM_LOAD_ODD ( "pro11.bin",  0x28000, 0x4000, 0xad6b45bc );
		ROM_LOAD_EVEN( "pro12.bin",  0x30000, 0x4000, 0xe2d25e1f );
		ROM_LOAD_ODD ( "pro13.bin",  0x30000, 0x4000, 0xe131f9b8 );
	
		ROM_REGION( 0x20000, REGION_CPU2 );
		ROM_LOAD_EVEN( "csd7.bin",  0x00000, 0x2000, 0x5501f54b );
		ROM_LOAD_ODD ( "csd17.bin", 0x00000, 0x2000, 0x2e482580 );
		ROM_LOAD_EVEN( "csd8.bin",  0x04000, 0x2000, 0x13366575 );
		ROM_LOAD_ODD ( "csd18.bin", 0x04000, 0x2000, 0xbcfe5820 );
	
		ROM_REGION( 0x8000, REGION_GFX1 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "tileh.bin",    0x00000, 0x4000, 0xa7237eb1 );
		ROM_LOAD( "tileg.bin",    0x04000, 0x4000, 0x626cc69b );
	
		ROM_REGION( 0x20000, REGION_GFX2 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "spr6h.bin",    0x00000, 0x4000, 0xa51158dc );
		ROM_LOAD( "spr7h.bin",    0x04000, 0x4000, 0x941feecf );
		ROM_LOAD( "spr6j.bin",    0x08000, 0x4000, 0xf3eef316 );
		ROM_LOAD( "spr7j.bin",    0x0c000, 0x4000, 0xa8a34033 );
		ROM_LOAD( "spr10h.bin",   0x10000, 0x4000, 0xa99daea6 );
		ROM_LOAD( "spr11h.bin",   0x14000, 0x4000, 0xc1a767fb );
		ROM_LOAD( "spr10j.bin",   0x18000, 0x4000, 0x4dd04376 );
		ROM_LOAD( "spr11j.bin",   0x1c000, 0x4000, 0xe8c6a880 );
	
		ROM_REGION( 0x8000, REGION_GFX3 );/* bg color maps */
		ROM_LOAD_GFX_EVEN( "tilef.bin",  0x0000, 0x4000, 0xa0dfcd7e );
		ROM_LOAD_GFX_ODD ( "tilee.bin",  0x0000, 0x4000, 0xab504dc8 );
	ROM_END(); }}; 
	
	static RomLoadPtr rom_xenophob = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION( 0x40000, REGION_CPU1 );
		ROM_LOAD_EVEN( "xeno_pro.3c",  0x00000, 0x10000, 0xf44c2e60 );
		ROM_LOAD_ODD ( "xeno_pro.3b",  0x00000, 0x10000, 0x01609a3b );
		ROM_LOAD_EVEN( "xeno_pro.2c",  0x20000, 0x10000, 0xe45bf669 );
		ROM_LOAD_ODD ( "xeno_pro.2b",  0x20000, 0x10000, 0xda5d39d5 );
	
		ROM_REGION( 0x40000, REGION_CPU2 ); /* Sounds Good board */
		ROM_LOAD_EVEN( "xeno_snd.u7",  0x00000, 0x10000, 0x77561d15 );
		ROM_LOAD_ODD ( "xeno_snd.u17", 0x00000, 0x10000, 0x837a1a71 );
		ROM_LOAD_EVEN( "xeno_snd.u8",  0x20000, 0x10000, 0x6e2915c7 );
		ROM_LOAD_ODD ( "xeno_snd.u18", 0x20000, 0x10000, 0x12492145 );
	
		ROM_REGION( 0x10000, REGION_GFX1 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "xeno_bg.11d",  0x00000, 0x08000, 0x3d2cf284 );
		ROM_LOAD( "xeno_bg.12d",  0x08000, 0x08000, 0xc32288b1 );
	
		ROM_REGION( 0x40000, REGION_GFX2 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "xeno_fg.7j",   0x00000, 0x10000, 0xb12eddb2 );
		ROM_LOAD( "xeno_fg.8j",   0x10000, 0x10000, 0x20e682f5 );
		ROM_LOAD( "xeno_fg.9j",   0x20000, 0x10000, 0x82fb3e09 );
		ROM_LOAD( "xeno_fg.10j",  0x30000, 0x10000, 0x6a7a3516 );
	ROM_END(); }}; 
	
/*TODO*///	static RomLoadPtr rom_spyhunt2 = new RomLoadPtr(){ public void handler(){ 
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU1 );
/*TODO*///		ROM_LOAD_EVEN( "sh23c.bin",  0x00000, 0x10000, 0x30b91c90 );
/*TODO*///		ROM_LOAD_ODD ( "sh23b.bin",  0x00000, 0x10000, 0xf64513c6 );
/*TODO*///		ROM_LOAD_EVEN( "sh22c.bin",  0x20000, 0x10000, 0x8ee65009 );
/*TODO*///		ROM_LOAD_ODD ( "sh22b.bin",  0x20000, 0x10000, 0x850c21ad );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x10000, REGION_CPU2 ); /* 64k for the Turbo Cheap Squeak */
/*TODO*///		ROM_LOAD( "turbo-cs.u5", 0x08000, 0x4000, 0x4b1d8a66 );
/*TODO*///		ROM_LOAD( "turbo-cs.u4", 0x0c000, 0x4000, 0x3722ce48 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU3 ); /* Sounds Good board */
/*TODO*///		ROM_LOAD_EVEN( "sh2u7.bin",  0x00000, 0x10000, 0x02362ea4 );
/*TODO*///		ROM_LOAD_ODD ( "sh2u17.bin", 0x00000, 0x10000, 0xe29a2c37 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x10000, REGION_GFX1 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "sh2bg0.bin",  0x00000, 0x08000, 0xcb3c3d8e );
/*TODO*///		ROM_LOAD( "sh2bg1.bin",  0x08000, 0x08000, 0x029d4af1 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "fg0.7j",   0x00000, 0x20000, 0x55ce12ea );
/*TODO*///		ROM_LOAD( "fg1.8j",   0x20000, 0x20000, 0x692afb67 );
/*TODO*///		ROM_LOAD( "fg2.9j",   0x40000, 0x20000, 0xf1aba383 );
/*TODO*///		ROM_LOAD( "fg3.10j",  0x60000, 0x20000, 0xd3475ff8 );
/*TODO*///	ROM_END(); }}; 
/*TODO*///	
/*TODO*///	static RomLoadPtr rom_spyhnt2a = new RomLoadPtr(){ public void handler(){ 
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU1 );
/*TODO*///		ROM_LOAD_EVEN( "3c",  0x00000, 0x10000, 0x5b92aadf );
/*TODO*///		ROM_LOAD_ODD ( "3b",  0x00000, 0x10000, 0x6ed0a25f );
/*TODO*///		ROM_LOAD_EVEN( "2c",  0x20000, 0x10000, 0xbc834f3f );
/*TODO*///		ROM_LOAD_ODD ( "2b",  0x20000, 0x10000, 0x8a9f7ef3 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x10000, REGION_CPU2 ); /* 64k for the Turbo Cheap Squeak */
/*TODO*///		ROM_LOAD( "turbo-cs.u5", 0x08000, 0x4000, 0x4b1d8a66 );
/*TODO*///		ROM_LOAD( "turbo-cs.u4", 0x0c000, 0x4000, 0x3722ce48 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU3 ); /* Sounds Good board */
/*TODO*///		ROM_LOAD_EVEN( "sh2u7.bin",  0x00000, 0x10000, 0x02362ea4 );
/*TODO*///		ROM_LOAD_ODD ( "sh2u17.bin", 0x00000, 0x10000, 0xe29a2c37 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x10000, REGION_GFX1 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "bg0.11d",  0x00000, 0x08000, 0x81efef7a );
/*TODO*///		ROM_LOAD( "bg1.12d",  0x08000, 0x08000, 0x6a902e4d );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "fg0.7j",   0x00000, 0x20000, 0x55ce12ea );
/*TODO*///		ROM_LOAD( "fg1.8j",   0x20000, 0x20000, 0x692afb67 );
/*TODO*///		ROM_LOAD( "fg2.9j",   0x40000, 0x20000, 0xf1aba383 );
/*TODO*///		ROM_LOAD( "fg3.10j",  0x60000, 0x20000, 0xd3475ff8 );
/*TODO*///	ROM_END(); }}; 
/*TODO*///	
/*TODO*///	static RomLoadPtr rom_blasted = new RomLoadPtr(){ public void handler(){ 
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU1 );
/*TODO*///		ROM_LOAD_EVEN( "3c",  0x00000, 0x10000, 0xb243b7df );
/*TODO*///		ROM_LOAD_ODD ( "3b",  0x00000, 0x10000, 0x627e30d3 );
/*TODO*///		ROM_LOAD_EVEN( "2c",  0x20000, 0x10000, 0x026f30bf );
/*TODO*///		ROM_LOAD_ODD ( "2b",  0x20000, 0x10000, 0x8e0e91a9 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU2 ); /* Sounds Good board */
/*TODO*///		ROM_LOAD_EVEN( "blasted.u7",  0x00000, 0x10000, 0x8d7c8ef6 );
/*TODO*///		ROM_LOAD_ODD ( "blasted.u17", 0x00000, 0x10000, 0xc79040b9 );
/*TODO*///		ROM_LOAD_EVEN( "blasted.u8",  0x20000, 0x10000, 0xc53094c0 );
/*TODO*///		ROM_LOAD_ODD ( "blasted.u18", 0x20000, 0x10000, 0x85688160 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x10000, REGION_GFX1 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "11d",  0x00000, 0x08000, 0xd8ed5cbc );
/*TODO*///		ROM_LOAD( "12d",  0x08000, 0x08000, 0x60d00c69 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "fg0",  0x00000, 0x20000, 0x5034ae8a );
/*TODO*///		ROM_LOAD( "fg1",  0x20000, 0x20000, 0x4fbdba58 );
/*TODO*///		ROM_LOAD( "fg2",  0x40000, 0x20000, 0x8891f6f8 );
/*TODO*///		ROM_LOAD( "fg3",  0x60000, 0x20000, 0x18e4a130 );
/*TODO*///	ROM_END(); }}; 
	
	static RomLoadPtr rom_archrivl = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION( 0x40000, REGION_CPU1 );
		ROM_LOAD_EVEN( "3c-rev2",  0x00000, 0x10000, 0x60d4b760 );
		ROM_LOAD_ODD ( "3b-rev2",  0x00000, 0x10000, 0xe0c07a8d );
		ROM_LOAD_EVEN( "2c-rev2",  0x20000, 0x10000, 0xcc2893f7 );
		ROM_LOAD_ODD ( "2b-rev2",  0x20000, 0x10000, 0xfa977050 );
	
		ROM_REGION( 0x70000, REGION_CPU2 ); /* Audio System board */
		ROM_LOAD( "u4.snd",  0x10000, 0x08000, 0x96b3c652 );
		ROM_LOAD( "u19.snd", 0x30000, 0x08000, 0xc4b3dc23 );
		ROM_LOAD( "u20.snd", 0x50000, 0x08000, 0xf7907a02 );
	
		ROM_REGION( 0x20000, REGION_GFX1 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "11d-rev1",  0x00000, 0x10000, 0x7eb3d7c6 );
		ROM_LOAD( "12d-rev1",  0x10000, 0x10000, 0x31e68050 );
	
		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "7j-rev1",   0x00000, 0x20000, 0x148ce28c );
		ROM_LOAD( "8j-rev1",   0x20000, 0x20000, 0x58187ac2 );
		ROM_LOAD( "9j-rev1",   0x40000, 0x20000, 0x0dd1204e );
		ROM_LOAD( "10j-rev1",  0x60000, 0x20000, 0xeb3d0344 );
	ROM_END(); }}; 
	
	static RomLoadPtr rom_archriv2 = new RomLoadPtr(){ public void handler(){ 
		ROM_REGION( 0x40000, REGION_CPU1 );
		ROM_LOAD_EVEN( "archrivl.4",  0x00000, 0x10000, 0x3c545740 );
		ROM_LOAD_ODD ( "archrivl.2",  0x00000, 0x10000, 0xbc4df2b9 );
		ROM_LOAD_EVEN( "archrivl.3",  0x20000, 0x10000, 0xd6d08ff7 );
		ROM_LOAD_ODD ( "archrivl.1",  0x20000, 0x10000, 0x92f3a43d );
	
		ROM_REGION( 0x70000, REGION_CPU2 ); /* Audio System board */
		ROM_LOAD( "u4.snd",  0x10000, 0x08000, 0x96b3c652 );
		ROM_LOAD( "u19.snd", 0x30000, 0x08000, 0xc4b3dc23 );
		ROM_LOAD( "u20.snd", 0x50000, 0x08000, 0xf7907a02 );
	
		ROM_REGION( 0x20000, REGION_GFX1 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "11d-rev1",  0x00000, 0x10000, 0x7eb3d7c6 );
		ROM_LOAD( "12d-rev1",  0x10000, 0x10000, 0x31e68050 );
	
		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
		ROM_LOAD( "7j-rev1",   0x00000, 0x20000, 0x148ce28c );
		ROM_LOAD( "8j-rev1",   0x20000, 0x20000, 0x58187ac2 );
		ROM_LOAD( "9j-rev1",   0x40000, 0x20000, 0x0dd1204e );
		ROM_LOAD( "10j-rev1",  0x60000, 0x20000, 0xeb3d0344 );
	ROM_END(); }}; 
	
/*TODO*///	static RomLoadPtr rom_pigskin = new RomLoadPtr(){ public void handler(){ 
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU1 );
/*TODO*///		ROM_LOAD_EVEN( "pigskin.a5",  0x00000, 0x10000, 0xab61c29b );
/*TODO*///		ROM_LOAD_ODD ( "pigskin.b5",  0x00000, 0x10000, 0x55a802aa );
/*TODO*///		ROM_LOAD_EVEN( "pigskin.a6",  0x20000, 0x10000, 0x4d8b7e50 );
/*TODO*///		ROM_LOAD_ODD ( "pigskin.b6",  0x20000, 0x10000, 0x1194f187 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x70000, REGION_CPU2 ); /* Audio System board */
/*TODO*///		ROM_LOAD( "pigskin.u4",  0x10000, 0x10000, 0x6daf2d37 );
/*TODO*///		ROM_LOAD( "pigskin.u19", 0x30000, 0x10000, 0x56fd16a3 );
/*TODO*///		ROM_LOAD( "pigskin.u20", 0x50000, 0x10000, 0x5d032fb8 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x20000, REGION_GFX1 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "pigskin.e2",  0x00000, 0x10000, 0x12d5737b );
/*TODO*///		ROM_LOAD( "pigskin.e1",  0x10000, 0x10000, 0x460202a9 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "pigskin.h15", 0x00000, 0x20000, 0x2655d03f );
/*TODO*///		ROM_LOAD( "pigskin.h17", 0x20000, 0x20000, 0x31c52ea7 );
/*TODO*///		ROM_LOAD( "pigskin.h18", 0x40000, 0x20000, 0xb36c4109 );
/*TODO*///		ROM_LOAD( "pigskin.h14", 0x60000, 0x20000, 0x09c87104 );
/*TODO*///	ROM_END(); }}; 
/*TODO*///	
/*TODO*///	static RomLoadPtr rom_trisport = new RomLoadPtr(){ public void handler(){ 
/*TODO*///		ROM_REGION( 0x40000, REGION_CPU1 );
/*TODO*///		ROM_LOAD_EVEN( "la3.a5",  0x00000, 0x10000, 0xfe1e9e37 );
/*TODO*///		ROM_LOAD_ODD ( "la3.b5",  0x00000, 0x10000, 0xf352ec81 );
/*TODO*///		ROM_LOAD_EVEN( "la3.a6",  0x20000, 0x10000, 0x9c6a1398 );
/*TODO*///		ROM_LOAD_ODD ( "la3.b6",  0x20000, 0x10000, 0x597b564c );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x70000, REGION_CPU2 ); /* Audio System board */
/*TODO*///		ROM_LOAD( "sl1-snd.u4",  0x10000, 0x10000, 0x0ed8c904 );
/*TODO*///		ROM_LOAD( "sl1-snd.u19", 0x30000, 0x10000, 0xb57d7d7e );
/*TODO*///		ROM_LOAD( "sl1-snd.u20", 0x50000, 0x08000, 0x3ae15c08 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x20000, REGION_GFX1 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "la2.e2",  0x00000, 0x10000, 0xf61149a0 );
/*TODO*///		ROM_LOAD( "la2.e1",  0x10000, 0x10000, 0xcf753497 );
/*TODO*///	
/*TODO*///		ROM_REGION( 0x80000, REGION_GFX2 | REGIONFLAG_DISPOSE );
/*TODO*///		ROM_LOAD( "la2.h15", 0x00000, 0x20000, 0x18a44d43 );
/*TODO*///		ROM_LOAD( "la2.h17", 0x20000, 0x20000, 0x874cd237 );
/*TODO*///		ROM_LOAD( "la2.h18", 0x40000, 0x20000, 0xf7637a18 );
/*TODO*///		ROM_LOAD( "la2.h14", 0x60000, 0x20000, 0x403f9401 );
/*TODO*///	ROM_END(); }}; 
	
	
	
	/*************************************
	 *
	 *	Driver initialization
	 *
	 *************************************/
	
	public static InitDriverPtr init_zwackery = new InitDriverPtr() { public void handler() 
	{
		MCR_CONFIGURE_SOUND(MCR_CHIP_SQUEAK_DELUXE);
	
		/* Zwackery doesn't care too much about this value; currently taken from Blasted */
		mcr68_timing_factor = (256.0 + 16.0) / (double)(Machine.drv.cpu[0].cpu_clock / 10);
	
		rom_decode();
	} };
	
	
/*TODO*///	static public static InitDriverPtr init_xenophob = new InitDriverPtr() { public void handler() 
/*TODO*///	{
/*TODO*///		MCR_CONFIGURE_SOUND(MCR_SOUNDS_GOOD);
/*TODO*///	
/*TODO*///		mcr68_sprite_clip = 0;
/*TODO*///		mcr68_sprite_xoffset = 0;
/*TODO*///	
/*TODO*///		/* Xenophobe doesn't care too much about this value; currently taken from Blasted */
/*TODO*///		mcr68_timing_factor = (256.0 + 16.0) / (double)(Machine.drv.cpu[0].cpu_clock / 10);
/*TODO*///	
/*TODO*///		/* install control port handler */
/*TODO*///		install_mem_write_handler(0, 0x0c0000, 0x0cffff, xenophobe_control_w);
/*TODO*///	
/*TODO*///		rom_decode();
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	static public static InitDriverPtr init_spyhunt2 = new InitDriverPtr() { public void handler() 
/*TODO*///	{
/*TODO*///		MCR_CONFIGURE_SOUND(MCR_TURBO_CHIP_SQUEAK | MCR_SOUNDS_GOOD);
/*TODO*///	
/*TODO*///		mcr68_sprite_clip = 0;
/*TODO*///		mcr68_sprite_xoffset = -6;
/*TODO*///	
/*TODO*///		/* Spy Hunter 2 doesn't care too much about this value; currently taken from Blasted */
/*TODO*///		mcr68_timing_factor = (256.0 + 16.0) / (double)(Machine.drv.cpu[0].cpu_clock / 10);
/*TODO*///	
/*TODO*///		/* analog port handling is a bit tricky */
/*TODO*///		install_mem_write_handler(0, 0x0c0000, 0x0cffff, spyhunt2_control_w);
/*TODO*///		install_mem_read_handler(0, 0x0d0000, 0x0dffff, spyhunt2_port_0_r);
/*TODO*///		install_mem_read_handler(0, 0x0e0000, 0x0effff, spyhunt2_port_1_r);
/*TODO*///	
/*TODO*///		rom_decode();
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	static public static InitDriverPtr init_blasted = new InitDriverPtr() { public void handler() 
/*TODO*///	{
/*TODO*///		MCR_CONFIGURE_SOUND(MCR_SOUNDS_GOOD);
/*TODO*///	
/*TODO*///		mcr68_sprite_clip = 0;
/*TODO*///		mcr68_sprite_xoffset = 0;
/*TODO*///	
/*TODO*///		/* Blasted checks the timing of VBLANK relative to the 493 interrupt */
/*TODO*///		/* VBLANK is required to come within 220-256 E clocks (i.e., 2200-2560 CPU clocks) */
/*TODO*///		/* after the 493; we also allow 16 E clocks for latency  */
/*TODO*///		mcr68_timing_factor = (256.0 + 16.0) / (double)(Machine.drv.cpu[0].cpu_clock / 10);
/*TODO*///	
/*TODO*///		/* handle control writes */
/*TODO*///		install_mem_write_handler(0, 0x0c0000, 0x0cffff, blasted_control_w);
/*TODO*///	
/*TODO*///		/* 6840 is mapped to the lower 8 bits */
/*TODO*///		install_mem_write_handler(0, 0x0a0000, 0x0a000f, mcr68_6840_lower_w);
/*TODO*///		install_mem_read_handler(0, 0x0a0000, 0x0a000f, mcr68_6840_lower_r);
/*TODO*///	
/*TODO*///		rom_decode();
/*TODO*///	} };
	
	
	public static InitDriverPtr init_archrivl = new InitDriverPtr() { public void handler() 
	{
		MCR_CONFIGURE_SOUND(MCR_WILLIAMS_SOUND);
	
		mcr68_sprite_clip = 16;
		mcr68_sprite_xoffset = 0;
	
		/* Arch Rivals doesn't care too much about this value; currently taken from Blasted */
		mcr68_timing_factor = (256.0 + 16.0) / (double)(Machine.drv.cpu[0].cpu_clock / 10);
	
		/* handle control writes */
		install_mem_write_handler(0, 0x0c0000, 0x0cffff, archrivl_control_w);
	
		/* 49-way joystick handling is a bit tricky */
		install_mem_read_handler(0, 0x0e0000, 0x0effff, archrivl_port_1_r);
	
		/* 6840 is mapped to the lower 8 bits */
		install_mem_write_handler(0, 0x0a0000, 0x0a000f, mcr68_6840_lower_w);
		install_mem_read_handler(0, 0x0a0000, 0x0a000f, mcr68_6840_lower_r);
	
		/* expand the sound ROMs */
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x18000), new UBytePtr(memory_region(REGION_CPU2), 0x10000), 0x08000);
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x20000), new UBytePtr(memory_region(REGION_CPU2), 0x10000), 0x10000);
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x38000), new UBytePtr(memory_region(REGION_CPU2), 0x30000), 0x08000);
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x40000), new UBytePtr(memory_region(REGION_CPU2), 0x30000), 0x10000);
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x58000), new UBytePtr(memory_region(REGION_CPU2), 0x50000), 0x08000);
		memcpy(new UBytePtr(memory_region(REGION_CPU2), 0x60000), new UBytePtr(memory_region(REGION_CPU2), 0x50000), 0x10000);
	
		rom_decode();
	} };
	
	
/*TODO*///	static public static InitDriverPtr init_pigskin = new InitDriverPtr() { public void handler() 
/*TODO*///	{
/*TODO*///		MCR_CONFIGURE_SOUND(MCR_WILLIAMS_SOUND);
/*TODO*///	
/*TODO*///		/* handle control writes */
/*TODO*///		install_mem_write_handler(0, 0x1a0000, 0x1affff, archrivl_control_w);
/*TODO*///	
/*TODO*///		/* Pigskin doesn't care too much about this value; currently taken from Tri-Sports */
/*TODO*///		mcr68_timing_factor = 115.0 / (double)(Machine.drv.cpu[0].cpu_clock / 10);
/*TODO*///	
/*TODO*///		mcr68_sprite_clip = 16;
/*TODO*///		mcr68_sprite_xoffset = 0;
/*TODO*///	
/*TODO*///		/* expand the sound ROMs */
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x20000], &memory_region(REGION_CPU2)[0x10000], 0x10000);
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x40000], &memory_region(REGION_CPU2)[0x30000], 0x10000);
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x60000], &memory_region(REGION_CPU2)[0x50000], 0x10000);
/*TODO*///	
/*TODO*///		rom_decode();
/*TODO*///	} };
/*TODO*///	
/*TODO*///	
/*TODO*///	static public static InitDriverPtr init_trisport = new InitDriverPtr() { public void handler() 
/*TODO*///	{
/*TODO*///		MCR_CONFIGURE_SOUND(MCR_WILLIAMS_SOUND);
/*TODO*///	
/*TODO*///		/* Tri-Sports checks the timing of VBLANK relative to the 493 interrupt */
/*TODO*///		/* VBLANK is required to come within 87-119 E clocks (i.e., 870-1190 CPU clocks) */
/*TODO*///		/* after the 493 */
/*TODO*///		mcr68_timing_factor = 115.0 / (double)(Machine.drv.cpu[0].cpu_clock / 10);
/*TODO*///	
/*TODO*///		/* handle control writes */
/*TODO*///		install_mem_write_handler(0, 0x1a0000, 0x1affff, archrivl_control_w);
/*TODO*///	
/*TODO*///		mcr68_sprite_clip = 0;
/*TODO*///		mcr68_sprite_xoffset = 0;
/*TODO*///	
/*TODO*///		/* expand the sound ROMs */
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x20000], &memory_region(REGION_CPU2)[0x10000], 0x10000);
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x40000], &memory_region(REGION_CPU2)[0x30000], 0x10000);
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x58000], &memory_region(REGION_CPU2)[0x50000], 0x08000);
/*TODO*///		memcpy(&memory_region(REGION_CPU2)[0x60000], &memory_region(REGION_CPU2)[0x50000], 0x10000);
/*TODO*///	
/*TODO*///		rom_decode();
/*TODO*///	} };
	
	
	
	/*************************************
	 *
	 *	Game drivers
	 *
	 *************************************/
	
	public static GameDriver driver_zwackery	   = new GameDriver("1984"	,"zwackery"	,"mcr68.java"	,rom_zwackery,null	,machine_driver_zwackery	,input_ports_zwackery	,init_zwackery	,ROT0	,	"Bally Midway", "Zwackery" );
/*TODO*///        public static GameDriver driver_xenophob	   = new GameDriver("1987"	,"xenophob"	,"mcr68.java"	,rom_xenophob,null	,machine_driver_xenophob	,input_ports_xenophob	,init_xenophob	,ROT0	,	"Bally Midway", "Xenophobe" );
/*TODO*///	public static GameDriver driver_spyhunt2	   = new GameDriver("1987"	,"spyhunt2"	,"mcr68.java"	,rom_spyhunt2,null	,machine_driver_spyhunt2	,input_ports_spyhunt2	,init_spyhunt2	,ROT0	,	"Bally Midway", "Spy Hunter 2 (rev 2)" )
/*TODO*///	public static GameDriver driver_spyhnt2a	   = new GameDriver("1987"	,"spyhnt2a"	,"mcr68.java"	,rom_spyhnt2a,driver_spyhunt2	,machine_driver_spyhunt2	,input_ports_spyhunt2	,init_spyhunt2	,ROT0	,	"Bally Midway", "Spy Hunter 2 (rev 1)" )
/*TODO*///	public static GameDriver driver_blasted	   = new GameDriver("1988"	,"blasted"	,"mcr68.java"	,rom_blasted,null	,machine_driver_xenophob	,input_ports_blasted	,init_blasted	,ROT0	,	"Bally Midway", "Blasted" )
	public static GameDriver driver_archrivl	   = new GameDriver("1989"	,"archrivl"	,"mcr68.java"	,rom_archrivl,null	,machine_driver_archrivl	,input_ports_archrivl	,init_archrivl	,ROT0	,	"Bally Midway", "Arch Rivals (rev 4.0)" );
	public static GameDriver driver_archriv2	   = new GameDriver("1989"	,"archriv2"	,"mcr68.java"	,rom_archriv2,driver_archrivl	,machine_driver_archrivl	,input_ports_archrivl	,init_archrivl	,ROT0	,	"Bally Midway", "Arch Rivals (rev 2.0)" );
/*TODO*///	public static GameDriver driver_trisport	   = new GameDriver("1989"	,"trisport"	,"mcr68.java"	,rom_trisport,null	,machine_driver_trisport	,input_ports_trisport	,init_trisport	,ROT270	,	"Bally Midway", "Tri-Sports" )
/*TODO*///	public static GameDriver driver_pigskin	   = new GameDriver("1990"	,"pigskin"	,"mcr68.java"	,rom_pigskin,null	,machine_driver_pigskin	,input_ports_pigskin	,init_pigskin	,ROT0	,	"Bally Midway", "Pigskin 621AD" )
}
