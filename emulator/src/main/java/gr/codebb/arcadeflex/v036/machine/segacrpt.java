/*
 *  ported to 0.36 (this file should be complete)
 * 
 */
package gr.codebb.arcadeflex.v036.machine;

import static gr.codebb.arcadeflex.v036.mame.common.*;
import static arcadeflex.v036.mame.commonH.*;
import static gr.codebb.arcadeflex.common.PtrLib.*;
import static gr.codebb.arcadeflex.v037b7.mame.memory.memory_set_opcode_base;

public class segacrpt {

    public static void sega_decode(char xortable[][]) {
        int A;
        UBytePtr rom = memory_region(REGION_CPU1);
        int diff = memory_region_length(REGION_CPU1) / 2;

        memory_set_opcode_base(0, new UBytePtr(rom, diff));

        for (A = 0x0000; A < 0x8000; A++) {
            int row, col;
            char src;

            src = rom.read(A);

            /* pick the translation table from bits 0, 4, 8 and 12 of the address */
            row = (A & 1) + (((A >> 4) & 1) << 1) + (((A >> 8) & 1) << 2) + (((A >> 12) & 1) << 3);

            /* pick the offset in the table from bits 3 and 5 of the source data */
            col = ((src >> 3) & 1) + (((src >> 5) & 1) << 1);
            /* the bottom half of the translation table is the mirror image of the top */
            if ((src & 0x80) != 0) {
                col = 3 - col;
            }

            /* decode the opcodes */
            rom.write(A + diff, src ^ xortable[2 * row][col]);

            /* decode the data */
            rom.write(A, src ^ xortable[2 * row + 1][col]);

            if (xortable[2 * row][col] == 0xff) /* table incomplete! (for development) */ {
                rom.write(A + diff, 0x00);
            }
            if (xortable[2 * row + 1][col] == 0xff) /* table incomplete! (for development) */ {
                rom.write(A, 0xee);
            }
        }

        /* copy the opcodes from the not encrypted part of the ROMs */
        for (A = 0x8000; A < diff; A++) {
            rom.write(A + diff, rom.read(A));
        }
    }

    public static void pengo_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...0...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...0...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...0...0...1...0 */
                    {0x08, 0x20, 0xa8, 0x80}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...1 */
                    {0x08, 0x08, 0xa8, 0xa8}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...1...0...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x08, 0x08, 0xa8, 0xa8}, /* ...0...1...0...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...0...1...1...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x00, 0x00, 0x00, 0x00}, /* ...0...1...1...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...0...0...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x00, 0x00, 0x00, 0x00}, /* ...1...0...0...1 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x08, 0x20, 0xa8, 0x80}, /* ...1...0...1...0 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...0...1...1 */
                    {0x08, 0x08, 0xa8, 0xa8}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...0...0 */
                    {0x00, 0x00, 0x00, 0x00}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...0...1 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x08, 0x20, 0xa8, 0x80}, /* ...1...1...1...0 */
                    {0x08, 0x08, 0xa8, 0xa8}, {0xa0, 0x88, 0x00, 0x28} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void szaxxon_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...0...0...0...0 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...1 */
                    {0xa8, 0x20, 0x80, 0x08}, {0x20, 0xa8, 0x20, 0xa8}, /* ...0...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...0...0...1...1 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...0...1...0...1 */
                    {0xa8, 0x20, 0x80, 0x08}, {0x20, 0xa8, 0x20, 0xa8}, /* ...0...1...1...0 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...1...1 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...1...0...0...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...1...0...1...0 */
                    {0xa8, 0x20, 0x80, 0x08}, {0x20, 0xa8, 0x20, 0xa8}, /* ...1...0...1...1 */
                    {0xa8, 0x20, 0x80, 0x08}, {0x20, 0xa8, 0x20, 0xa8}, /* ...1...1...0...0 */
                    {0xa8, 0x20, 0x80, 0x08}, {0x20, 0xa8, 0x20, 0xa8}, /* ...1...1...0...1 */
                    {0x08, 0x20, 0xa8, 0x80}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void suprloco_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...0...0...0 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...0...0...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...0...1...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...1...0...0 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...1...0...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...1...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...1...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...1...0...0...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...0...0...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...0...1...0 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...1...0...1...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...1...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...0...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...1...1...1...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0x88, 0x88, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void yamato_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0xa0, 0x28, 0x00}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...0...0 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...0...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x20, 0xa8, 0x08, 0x80}, /* ...0...0...1...1 */
                    {0x88, 0xa0, 0x28, 0x00}, {0x88, 0xa0, 0x28, 0x00}, /* ...0...1...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...1...0...1 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x20, 0xa8, 0x08, 0x80}, /* ...0...1...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...1...1...1 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x88, 0xa0, 0x28, 0x00}, /* ...1...0...0...0 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x28, 0x28, 0x88, 0x88}, /* ...1...0...0...1 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0x20, 0xa8, 0x08, 0x80}, /* ...1...0...1...0 */
                    {0x28, 0x28, 0x88, 0x88}, {0x20, 0xa8, 0x08, 0x80}, /* ...1...0...1...1 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x88, 0xa0, 0x28, 0x00}, /* ...1...1...0...0 */
                    {0x88, 0xa0, 0x28, 0x00}, {0x88, 0xa0, 0x28, 0x00}, /* ...1...1...0...1 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...1...1...1...0 */
                    {0x20, 0xa8, 0x08, 0x80}, {0x00, 0x00, 0x00, 0x00} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void sindbadm_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...0 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...0...0...1 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...0...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...1...1 */
                    {0xa8, 0x80, 0x80, 0xa8}, {0xa0, 0x28, 0x88, 0x00}, /* ...0...1...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...1 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...1...1...0 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...1...1...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...0...1 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...1...0...1...0 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x00, 0x28, 0xa0, 0x88}, /* ...1...0...1...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...0...0 */
                    {0xa8, 0x80, 0x80, 0xa8}, {0xa0, 0x28, 0x88, 0x00}, /* ...1...1...0...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void regulus_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x28, 0x00, 0x88, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...0 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...0...0...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...1...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...0...1...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...1...1...0 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...1...1...1 */
                    {0x80, 0xa8, 0x20, 0x08}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...0...1 */
                    {0x80, 0xa8, 0x20, 0x08}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...0...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...0...1...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...1...0...0 */
                    {0x80, 0xa8, 0x20, 0x08}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...1...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...1...1...0 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void mrviking_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...0...1...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...1...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...1...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...1...0 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...1...1...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...0...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...0...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...1...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...1...0...1...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...1...0...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...1...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...1...1...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x88, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void swat_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0x00, 0xa0, 0x28}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...0...0...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...0...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...1...0 */
                    {0xa0, 0xa0, 0xa0, 0xa0}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...1...1 */
                    {0x28, 0x28, 0x88, 0x88}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...1...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...0...1...0...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...1...1...0 */
                    {0x28, 0x28, 0x88, 0x88}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...1...1...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...0...0...0 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...0...1 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0xa0, 0x28, 0xa0, 0x28}, /* ...1...0...1...0 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0xa0, 0x28, 0xa0, 0x28}, /* ...1...0...1...1 */
                    {0xa0, 0x88, 0x00, 0x28}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...1...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x28, 0x88, 0x88}, /* ...1...1...0...1 */
                    {0xa0, 0xa0, 0xa0, 0xa0}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...1...1...0 */
                    {0x28, 0x28, 0x88, 0x88}, {0xa0, 0xa0, 0xa0, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void flicky_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x08, 0x80, 0x20, 0xa8}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0x00, 0x00, 0x28}, /* ...0...0...1...0 */
                    {0x28, 0x00, 0x00, 0x28}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...1 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x80, 0x08, 0x80, 0x08}, /* ...0...1...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...1 */
                    {0x28, 0x00, 0x00, 0x28}, {0x28, 0x00, 0x00, 0x28}, /* ...0...1...1...0 */
                    {0x28, 0x00, 0x00, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...1...1 */
                    {0x08, 0x80, 0x20, 0xa8}, {0xa8, 0x80, 0x08, 0x20}, /* ...1...0...0...0 */
                    {0xa8, 0x80, 0x08, 0x20}, {0x80, 0x08, 0x80, 0x08}, /* ...1...0...0...1 */
                    {0x28, 0x00, 0x00, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...1...0 */
                    {0xa8, 0x80, 0x08, 0x20}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...1...1 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x80, 0x08, 0x80, 0x08}, /* ...1...1...0...0 */
                    {0xa8, 0x80, 0x08, 0x20}, {0x80, 0x08, 0x80, 0x08}, /* ...1...1...0...1 */
                    {0x28, 0x00, 0x00, 0x28}, {0x28, 0x00, 0x00, 0x28}, /* ...1...1...1...0 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x88, 0x88, 0x28, 0x28} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void futspy_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x28, 0x00, 0x00, 0x28}, {0x28, 0x00, 0x00, 0x28}, /* ...0...0...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x08, 0x80, 0x20, 0xa8}, /* ...0...0...0...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0x08, 0x80, 0x20, 0xa8}, /* ...0...0...1...0 */
                    {0xa0, 0x88, 0x00, 0x28}, {0x20, 0x20, 0x80, 0x80}, /* ...0...0...1...1 */
                    {0x28, 0x00, 0x00, 0x28}, {0x88, 0x88, 0x88, 0x88}, /* ...0...1...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x08, 0x80, 0x20, 0xa8}, /* ...0...1...0...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0x20, 0x20, 0x80, 0x80}, /* ...0...1...1...0 */
                    {0x20, 0x20, 0x80, 0x80}, {0x08, 0x80, 0x20, 0xa8}, /* ...0...1...1...1 */
                    {0x88, 0x88, 0x88, 0x88}, {0x28, 0x00, 0x00, 0x28}, /* ...1...0...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0xa0, 0x88, 0x00, 0x28}, /* ...1...0...0...1 */
                    {0x20, 0x20, 0x80, 0x80}, {0x08, 0x80, 0x20, 0xa8}, /* ...1...0...1...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x20, 0x20, 0x80, 0x80}, /* ...1...0...1...1 */
                    {0x88, 0x88, 0x88, 0x88}, {0x88, 0x88, 0x88, 0x88}, /* ...1...1...0...0 */
                    {0x80, 0x08, 0x80, 0x08}, {0x08, 0x80, 0x20, 0xa8}, /* ...1...1...0...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0x28, 0x00, 0x00, 0x28}, /* ...1...1...1...0 */
                    {0x20, 0x20, 0x80, 0x80}, {0xa0, 0x88, 0x00, 0x28} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void bullfgtj_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0xa0, 0xa0, 0x00, 0x00}, {0x80, 0xa8, 0x20, 0x08}, /* ...0...0...0...0 */
                    {0x20, 0x20, 0x20, 0x20}, {0x20, 0x20, 0x20, 0x20}, /* ...0...0...0...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0x08, 0x20, 0x20, 0x08}, /* ...0...0...1...0 */
                    {0x88, 0x00, 0x88, 0x00}, {0x88, 0x00, 0x88, 0x00}, /* ...0...0...1...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0x20, 0x20, 0x20, 0x20}, /* ...0...1...0...0 */
                    {0x28, 0xa0, 0x00, 0x88}, {0x20, 0x20, 0x20, 0x20}, /* ...0...1...0...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0x08, 0x20, 0x20, 0x08}, /* ...0...1...1...0 */
                    {0x88, 0x00, 0x88, 0x00}, {0x88, 0x00, 0x88, 0x00}, /* ...0...1...1...1 */
                    {0x28, 0xa0, 0x00, 0x88}, {0xa0, 0xa0, 0x00, 0x00}, /* ...1...0...0...0 */
                    {0x88, 0x00, 0x88, 0x00}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...0...0...1 */
                    {0x28, 0xa0, 0x00, 0x88}, {0x08, 0x20, 0x20, 0x08}, /* ...1...0...1...0 */
                    {0x28, 0xa0, 0x00, 0x88}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...0...1...1 */
                    {0x20, 0x20, 0x20, 0x20}, {0x20, 0x20, 0x20, 0x20}, /* ...1...1...0...0 */
                    {0x88, 0x00, 0x88, 0x00}, {0x20, 0x20, 0x20, 0x20}, /* ...1...1...0...1 */
                    {0x08, 0x20, 0x20, 0x08}, {0x80, 0xa8, 0x20, 0x08}, /* ...1...1...1...0 */
                    {0x08, 0x20, 0x20, 0x08}, {0x88, 0x00, 0x88, 0x00} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void pitfall2_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...0...0 */
                    {0x08, 0x80, 0x08, 0x80}, {0x28, 0xa0, 0x00, 0x88}, /* ...0...0...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0xa0, 0x00, 0x00}, /* ...0...0...1...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x20, 0x08, 0x80, 0xa8}, /* ...0...1...0...0 */
                    {0x28, 0xa0, 0x00, 0x88}, {0x20, 0x08, 0x80, 0xa8}, /* ...0...1...0...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0xa0, 0x00, 0x00}, /* ...0...1...1...0 */
                    {0x28, 0xa0, 0x00, 0x88}, {0xa0, 0xa0, 0x00, 0x00}, /* ...0...1...1...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0x80, 0x80, 0x80, 0x80}, /* ...1...0...0...0 */
                    {0x80, 0x80, 0x80, 0x80}, {0x80, 0x80, 0x80, 0x80}, /* ...1...0...0...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...0...1...0 */
                    {0x80, 0x80, 0x80, 0x80}, {0x28, 0xa0, 0x00, 0x88}, /* ...1...0...1...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0x80, 0x80, 0x80, 0x80}, /* ...1...1...0...0 */
                    {0x80, 0x80, 0x80, 0x80}, {0x20, 0x08, 0x80, 0xa8}, /* ...1...1...0...1 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...1...1...0 */
                    {0x80, 0x80, 0x80, 0x80}, {0x28, 0xa0, 0x00, 0x88} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void nprinces_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x08, 0x80, 0x20, 0xa8}, {0xa0, 0x28, 0xa0, 0x28}, /* ...0...0...0...0 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...0...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...0...1...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0xa0, 0x28, 0xa0, 0x28}, /* ...0...1...0...0 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0xa8, 0xa8, 0x08, 0x08}, /* ...0...1...0...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...1...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...1...1...1 */
                    {0xa0, 0x28, 0xa0, 0x28}, {0xa0, 0x28, 0xa0, 0x28}, /* ...1...0...0...0 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...0...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0x88, 0x28, 0x28}, /* ...1...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...1...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...1...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...1...0...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...1...0 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x28, 0x00, 0x88, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void seganinj_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...0...0...1 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0xa8, 0xa8, 0x08, 0x08}, /* ...0...0...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa0, 0xa0, 0xa0, 0xa0}, /* ...0...0...1...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...0...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...1...0...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...1...0 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa8, 0xa8, 0x08, 0x08}, /* ...0...1...1...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...0...0 */
                    {0xa0, 0xa0, 0xa0, 0xa0}, {0x28, 0xa0, 0x28, 0xa0}, /* ...1...0...0...1 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...1...0 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0x28, 0xa0, 0x28, 0xa0}, /* ...1...0...1...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...1...0...0 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...1...0...1 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...1...1...0 */
                    {0xa8, 0xa8, 0x08, 0x08}, {0x28, 0x00, 0x88, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void imsorry_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0x00, 0xa0, 0x28}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...0...0...0 */
                    {0x00, 0x28, 0xa0, 0x88}, {0x88, 0x00, 0xa0, 0x28}, /* ...0...0...0...1 */
                    {0x88, 0x00, 0x88, 0x00}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...0...1...0 */
                    {0x00, 0x28, 0xa0, 0x88}, {0x88, 0x00, 0x88, 0x00}, /* ...0...0...1...1 */
                    {0x00, 0x28, 0xa0, 0x88}, {0x08, 0x08, 0xa8, 0xa8}, /* ...0...1...0...0 */
                    {0x00, 0x28, 0xa0, 0x88}, {0x20, 0x20, 0x80, 0x80}, /* ...0...1...0...1 */
                    {0x20, 0x20, 0x80, 0x80}, {0x00, 0x28, 0xa0, 0x88}, /* ...0...1...1...0 */
                    {0x20, 0x20, 0x80, 0x80}, {0x88, 0x00, 0x88, 0x00}, /* ...0...1...1...1 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x08, 0x08, 0xa8, 0xa8}, /* ...1...0...0...0 */
                    {0x08, 0x08, 0xa8, 0xa8}, {0x88, 0x00, 0xa0, 0x28}, /* ...1...0...0...1 */
                    {0x08, 0x20, 0x20, 0x08}, {0x08, 0x20, 0x20, 0x08}, /* ...1...0...1...0 */
                    {0x88, 0x00, 0xa0, 0x28}, {0x08, 0x20, 0x20, 0x08}, /* ...1...0...1...1 */
                    {0x08, 0x20, 0x20, 0x08}, {0x08, 0x08, 0xa8, 0xa8}, /* ...1...1...0...0 */
                    {0x08, 0x20, 0x20, 0x08}, {0x20, 0x20, 0x80, 0x80}, /* ...1...1...0...1 */
                    {0x20, 0x20, 0x80, 0x80}, {0x08, 0x20, 0x20, 0x08}, /* ...1...1...1...0 */
                    {0x20, 0x20, 0x80, 0x80}, {0x08, 0x20, 0x20, 0x08} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void teddybb_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x20, 0x20, 0x20, 0x20}, {0x80, 0x08, 0x80, 0x08}, /* ...0...0...0...0 */
                    {0x20, 0x20, 0x20, 0x20}, {0xa0, 0xa0, 0x00, 0x00}, /* ...0...0...0...1 */
                    {0x28, 0x00, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...1...1 */
                    {0x20, 0x20, 0x20, 0x20}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...0...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0xa0, 0x00, 0x00}, /* ...0...1...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...1...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...1...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0x80, 0x08, 0x80, 0x08}, /* ...1...0...0...0 */
                    {0xa0, 0x28, 0x88, 0x00}, {0xa0, 0xa0, 0x00, 0x00}, /* ...1...0...0...1 */
                    {0xa0, 0x28, 0x88, 0x00}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...0...1...0 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...0...1...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0x20, 0x20, 0x20, 0x20}, /* ...1...1...0...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0x28, 0x88, 0x00}, /* ...1...1...0...1 */
                    {0x80, 0x08, 0x80, 0x08}, {0xa0, 0x88, 0x88, 0xa0}, /* ...1...1...1...0 */
                    {0xa0, 0xa0, 0x00, 0x00}, {0xa0, 0x28, 0x88, 0x00} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void hvymetal_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x88, 0xa0, 0xa0, 0x88}, {0xa0, 0x88, 0x88, 0xa0}, /* ...0...0...0...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x88, 0xa0, 0xa0, 0x88}, /* ...0...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x88, 0x88, 0x28, 0x28}, /* ...0...0...1...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...0...1 */
                    {0xa0, 0x88, 0x88, 0xa0}, {0x88, 0x88, 0x28, 0x28}, /* ...0...1...1...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x28, 0x00, 0x88, 0xa0}, /* ...0...1...1...1 */
                    {0xa0, 0x28, 0x88, 0x00}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...0...0 */
                    {0xa0, 0x28, 0x88, 0x00}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...0...1 */
                    {0xa0, 0x28, 0x88, 0x00}, {0x88, 0xa0, 0xa0, 0x88}, /* ...1...0...1...0 */
                    {0x88, 0xa0, 0xa0, 0x88}, {0x28, 0x00, 0x88, 0xa0}, /* ...1...0...1...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa0, 0x28, 0x88, 0x00}, /* ...1...1...0...0 */
                    {0xa0, 0x28, 0x88, 0x00}, {0x28, 0xa0, 0x28, 0xa0}, /* ...1...1...0...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa0, 0x28, 0x88, 0x00}, /* ...1...1...1...0 */
                    {0x28, 0x00, 0x88, 0xa0}, {0x28, 0xa0, 0x28, 0xa0} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    public static void myheroj_decode() {
        char xortable[][]
                = {
                    /*       opcode                   data                     address      */
                    /*  A    B    C    D         A    B    C    D                           */
                    {0x20, 0x08, 0x80, 0xa8}, {0x80, 0xa8, 0xa8, 0x80}, /* ...0...0...0...0 */
                    {0x20, 0x08, 0x80, 0xa8}, {0x80, 0xa8, 0xa8, 0x80}, /* ...0...0...0...1 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...0...1...0 */
                    {0x08, 0x80, 0x20, 0xa8}, {0x80, 0xa8, 0xa8, 0x80}, /* ...0...0...1...1 */
                    {0x20, 0x08, 0x80, 0xa8}, {0x28, 0xa0, 0x28, 0xa0}, /* ...0...1...0...0 */
                    {0x20, 0x08, 0x80, 0xa8}, {0x08, 0x80, 0x20, 0xa8}, /* ...0...1...0...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...1...1...0 */
                    {0x08, 0x80, 0x20, 0xa8}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...0...1...1...1 */
                    {0x28, 0xa0, 0x28, 0xa0}, {0x20, 0x08, 0x80, 0xa8}, /* ...1...0...0...0 */
                    {0x80, 0xa8, 0xa8, 0x80}, {0x20, 0x08, 0x80, 0xa8}, /* ...1...0...0...1 */
                    {0x80, 0xa8, 0xa8, 0x80}, {0x80, 0xa8, 0xa8, 0x80}, /* ...1...0...1...0 */
                    {0xa8, 0xa8, 0xa8, 0xa8}, {0x80, 0xa8, 0xa8, 0x80}, /* ...1...0...1...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0x88, 0x88, 0x28, 0x28}, /* ...1...1...0...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0x08, 0x80, 0x20, 0xa8}, /* ...1...1...0...1 */
                    {0x88, 0x88, 0x28, 0x28}, {0xa8, 0xa8, 0xa8, 0xa8}, /* ...1...1...1...0 */
                    {0x88, 0x88, 0x28, 0x28}, {0xa8, 0xa8, 0xa8, 0xa8} /* ...1...1...1...1 */};

        sega_decode(xortable);
    }

    /**
     * ****************************************************************************
     *
     * 4D Warriors
     *
     * This encryption is quite different from the standard one. It is still a
     * XOR scheme, but the value to use for the XOR is chosen differently, and
     * the affected bits are D0, D2, D4 and D6 instead of D3, D5 and D7.
     *
     * The translation table depends on A0, A3, A6, A9, A12 and A14; however A0,
     * A3 and A6 only select some fixed additional XOR, so there are only 8
     * really different tables.
     *
     * There are no separate tables for data and opcodes: the opcodes are just
     * XORed with an additional 0x40. To make it a little more complicated,
     * however, data picks its XOR value not from the line given by the address
     * but from the one below. For example if you are decoding a byte at address
     * .1.0..1..0..1..0, you pick the XOR value as if you were at address
     * .1.0..1..0..1..1 (note that I'm not talking about the rows of the
     * xortable below, but of the "logical" ones which are generated by them
     * with the additional fixed XORs selected by A0, A3 and A6).
     *
     *****************************************************************************
     */
    public static void fdwarrio_decode() {
        char xortable[][]
                = {
                    /* note how the first lines are highly repetitive, while the */
                    /* last ones get more and more unique. */
                    {0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00}, /* .0.0..0..x..x..x */
                    {0x00, 0x11, 0x00, 0x11, 0x11, 0x00, 0x11, 0x00}, /* .0.0..1..x..x..x */
                    {0x00, 0x05, 0x05, 0x00, 0x00, 0x05, 0x05, 0x00}, /* .0.1..0..x..x..x */
                    {0x00, 0x00, 0x44, 0x44, 0x14, 0x14, 0x50, 0x50}, /* .0.1..1..x..x..x */
                    {0x00, 0x00, 0x14, 0x14, 0x50, 0x50, 0x44, 0x44}, /* .1.0..0..x..x..x */
                    {0x00, 0x05, 0x05, 0x00, 0x50, 0x55, 0x55, 0x50}, /* .1.0..1..x..x..x */
                    {0x00, 0x11, 0x05, 0x14, 0x14, 0x05, 0x11, 0x00}, /* .1.1..0..x..x..x */
                    {0x00, 0x41, 0x05, 0x44, 0x14, 0x55, 0x11, 0x50}, /* .1.1..1..x..x..x */
                    {0x00, 0x11, 0x05, 0x14, 0x50, 0x41, 0x55, 0x44} /* extra line for data decode */};
        int A;
        UBytePtr rom = memory_region(REGION_CPU1);
        int diff = memory_region_length(REGION_CPU1) / 2;

        memory_set_opcode_base(0, new UBytePtr(rom, diff));

        for (A = 0x0000; A < 0x8000; A++) {
            int row, col;
            char src;

            src = rom.read(A);

            /* pick the translation table from bits 0, 3, 6, 9, 12 and 14 of the address */
            row = (A & 1) + (((A >> 3) & 1) << 1) + (((A >> 6) & 1) << 2)
                    + (((A >> 9) & 1) << 3) + (((A >> 12) & 1) << 4) + (((A >> 14) & 1) << 5);

            /* pick the offset in the table from bits 0, 2, 4 and 6 of the source data */
            col = ((src >> 0) & 1) + (((src >> 2) & 1) << 1) + (((src >> 4) & 1) << 2);
            /* the bottom half of the translation table is the mirror image of the top */
            if ((src & 0x40) != 0) {
                col = 7 - col;
            }

            /* decode the opcodes */
            rom.write(A + diff, src ^ xortable[row >> 3][col] ^ 0x40);
            if ((row & 1) != 0) {
                rom.write(A + diff, rom.read(A + diff) ^ 0x10);
            }
            if ((row & 2) != 0) {
                rom.write(A + diff, rom.read(A + diff) ^ 0x04);
            }
            if ((row & 4) != 0) {
                rom.write(A + diff, rom.read(A + diff) ^ 0x01);
            }

            /* decode the data */
            row++;	/* the data XOR table is shifted by one position!!!! */

            rom.write(A, src ^ xortable[row >> 3][col]);
            if ((row & 1) != 0) {
                rom.write(A, rom.read(A) ^ 0x10);
            }
            if ((row & 2) != 0) {
                rom.write(A, rom.read(A) ^ 0x04);
            }
            if ((row & 4) != 0) {
                rom.write(A, rom.read(A) ^ 0x01);
            }
        }

        /* copy the opcodes from the not encrypted part of the ROMs */
        for (A = 0x8000; A < diff; A++) {
            rom.write(A + diff, rom.read(A));
        }
    }

    /**
     * ****************************************************************************
     *
     * Wonder Boy
     *
     * This is different again. It is similar to 4D Warriors - it affects the
     * same data bits and is selected by the same address lines, but I haven't
     * been able to find any regularities in the XOR table, so I'm using a huge
     * 1024 bytes array.
     *
     *****************************************************************************
     */
    public static void wboy3_decode() {
        /* not decoded yet! */
    }

    public static void wboy4_decode() {
        char opcode_xortable[][]
                = {
                    {0x00, 0x00, 0x44, 0x44, 0x00, 0x00, 0x44, 0x44}, /* .0.0 ..0. .0.. 0..0 */
                    {0x45, 0x54, 0x45, 0x54, 0x54, 0x45, 0x54, 0x45}, /* .0.0 ..0. .0.. 0..1 */
                    {0x11, 0x11, 0x11, 0x11, 0x41, 0x41, 0x41, 0x41}, /* .0.0 ..0. .0.. 1..0 */
                    {0x01, 0x10, 0x01, 0x10, 0x10, 0x01, 0x10, 0x01}, /* .0.0 ..0. .0.. 1..1 */
                    {0x44, 0x44, 0x44, 0x44, 0x14, 0x14, 0x14, 0x14}, /* .0.0 ..0. .1.. 0..0 */
                    {0x10, 0x01, 0x10, 0x01, 0x01, 0x10, 0x01, 0x10}, /* .0.0 ..0. .1.. 0..1 */
                    {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55}, /* .0.0 ..0. .1.. 1..0 */
                    {0x05, 0x05, 0x11, 0x11, 0x11, 0x11, 0x05, 0x05}, /* .0.0 ..0. .1.. 1..1 */
                    {0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41}, /* .0.0 ..1. .0.. 0..0 */
                    {0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14}, /* .0.0 ..1. .0.. 0..1 */
                    {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}, /* .0.0 ..1. .0.. 1..0 */
                    {0x40, 0x40, 0x54, 0x54, 0x54, 0x54, 0x40, 0x40}, /* .0.0 ..1. .0.. 1..1 */
                    {0x15, 0x15, 0x51, 0x51, 0x01, 0x01, 0x45, 0x45}, /* .0.0 ..1. .1.. 0..0 */
                    {0x51, 0x10, 0x51, 0x10, 0x51, 0x10, 0x51, 0x10}, /* .0.0 ..1. .1.. 0..1 */
                    {0x01, 0x01, 0x45, 0x45, 0x15, 0x15, 0x51, 0x51}, /* .0.0 ..1. .1.. 1..0 */
                    {0x44, 0x05, 0x44, 0x05, 0x44, 0x05, 0x44, 0x05}, /* .0.0 ..1. .1.. 1..1 */
                    {0x10, 0x10, 0x54, 0x54, 0x04, 0x04, 0x40, 0x40}, /* .0.1 ..0. .0.. 0..0 */
                    {0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41}, /* .0.1 ..0. .0.. 0..1 */
                    {0x45, 0x40, 0x40, 0x45, 0x45, 0x40, 0x40, 0x45}, /* .0.1 ..0. .0.. 1..0 */
                    {0x11, 0x11, 0x55, 0x55, 0x11, 0x11, 0x55, 0x55}, /* .0.1 ..0. .0.. 1..1 */
                    {0x54, 0x51, 0x51, 0x54, 0x54, 0x51, 0x51, 0x54}, /* .0.1 ..0. .1.. 0..0 */
                    {0x04, 0x04, 0x40, 0x40, 0x04, 0x04, 0x40, 0x40}, /* .0.1 ..0. .1.. 0..1 */
                    {0x40, 0x45, 0x45, 0x40, 0x40, 0x45, 0x45, 0x40}, /* .0.1 ..0. .1.. 1..0 */
                    {0x15, 0x15, 0x15, 0x15, 0x45, 0x45, 0x45, 0x45}, /* .0.1 ..0. .1.. 1..1 */
                    {0x05, 0x14, 0x05, 0x14, 0x14, 0x05, 0x14, 0x05}, /* .0.1 ..1. .0.. 0..0 */
                    {0x41, 0x41, 0x41, 0x41, 0x11, 0x11, 0x11, 0x11}, /* .0.1 ..1. .0.. 0..1 */
                    {0x14, 0x05, 0x14, 0x05, 0x05, 0x14, 0x05, 0x14}, /* .0.1 ..1. .0.. 1..0 */
                    {0x50, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00}, /* .0.1 ..1. .0.. 1..1 */
                    {0x00, 0x11, 0x00, 0x11, 0x11, 0x00, 0x11, 0x00}, /* .0.1 ..1. .1.. 0..0 */
                    {0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45}, /* .0.1 ..1. .1.. 0..1 */
                    {0x11, 0x11, 0x05, 0x05, 0x05, 0x05, 0x11, 0x11}, /* .0.1 ..1. .1.. 1..0 */
                    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01}, /* .0.1 ..1. .1.. 1..1 */
                    {0x00, 0x11, 0x05, 0x14, 0x14, 0x05, 0x11, 0x00}, /* .1.0 ..0. .0.. 0..0 */
                    {0x45, 0x04, 0x40, 0x01, 0x45, 0x04, 0x40, 0x01}, /* .1.0 ..0. .0.. 0..1 */
                    {0x11, 0x14, 0x14, 0x11, 0x41, 0x44, 0x44, 0x41}, /* .1.0 ..0. .0.. 1..0 */
                    {0x01, 0x40, 0x04, 0x45, 0x01, 0x40, 0x04, 0x45}, /* .1.0 ..0. .0.. 1..1 */
                    {0x44, 0x41, 0x41, 0x44, 0x14, 0x11, 0x11, 0x14}, /* .1.0 ..0. .1.. 0..0 */
                    {0x10, 0x51, 0x15, 0x54, 0x10, 0x51, 0x15, 0x54}, /* .1.0 ..0. .1.. 0..1 */
                    {0x55, 0x55, 0x41, 0x41, 0x05, 0x05, 0x11, 0x11}, /* .1.0 ..0. .1.. 1..0 */
                    {0x05, 0x14, 0x00, 0x11, 0x55, 0x44, 0x50, 0x41}, /* .1.0 ..0. .1.. 1..1 */
                    {0x41, 0x41, 0x55, 0x55, 0x11, 0x11, 0x05, 0x05}, /* .1.0 ..1. .0.. 0..0 */
                    {0x14, 0x05, 0x11, 0x00, 0x44, 0x55, 0x41, 0x50}, /* .1.0 ..1. .0.. 0..1 */
                    {0x04, 0x04, 0x10, 0x10, 0x54, 0x54, 0x40, 0x40}, /* .1.0 ..1. .0.. 1..0 */
                    {0x40, 0x51, 0x45, 0x54, 0x10, 0x01, 0x15, 0x04}, /* .1.0 ..1. .0.. 1..1 */
                    {0x15, 0x10, 0x51, 0x54, 0x04, 0x01, 0x40, 0x45}, /* .1.0 ..1. .1.. 0..0 */
                    {0x51, 0x10, 0x54, 0x15, 0x45, 0x04, 0x40, 0x01}, /* .1.0 ..1. .1.. 0..1 */
                    {0x01, 0x04, 0x45, 0x40, 0x10, 0x15, 0x54, 0x51}, /* .1.0 ..1. .1.. 1..0 */
                    {0x44, 0x05, 0x41, 0x00, 0x50, 0x11, 0x55, 0x14}, /* .1.0 ..1. .1.. 1..1 */
                    /* the following are all FF because there is no code to decode */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .0.. 0..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .0.. 0..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .0.. 1..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .0.. 1..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .1.. 0..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .1.. 0..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .1.. 1..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..0. .1.. 1..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .0.. 0..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .0.. 0..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .0.. 1..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .0.. 1..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .1.. 0..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .1.. 0..1 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .1.. 1..0 */
                    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, /* .1.1 ..1. .1.. 1..1 */};
        char data_xortable[][]
                = {
                    {0x55, 0x14, 0x55, 0x14, 0x55, 0x14, 0x55, 0x14}, /* .0.0 ..0. .0.. 0..0 */
                    {0x05, 0x05, 0x41, 0x41, 0x11, 0x11, 0x55, 0x55}, /* .0.0 ..0. .0.. 0..1 */
                    {0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00}, /* .0.0 ..0. .0.. 1..0 */
                    {0x14, 0x14, 0x50, 0x50, 0x00, 0x00, 0x44, 0x44}, /* .0.0 ..0. .0.. 1..1 */
                    {0x50, 0x11, 0x50, 0x11, 0x50, 0x11, 0x50, 0x11}, /* .0.0 ..0. .1.. 0..0 */
                    {0x00, 0x00, 0x44, 0x44, 0x14, 0x14, 0x50, 0x50}, /* .0.0 ..0. .1.. 0..1 */
                    {0x15, 0x15, 0x51, 0x51, 0x15, 0x15, 0x51, 0x51}, /* .0.0 ..0. .1.. 1..0 */
                    {0x51, 0x54, 0x54, 0x51, 0x51, 0x54, 0x54, 0x51}, /* .0.0 ..0. .1.. 1..1 */
                    {0x01, 0x01, 0x45, 0x45, 0x01, 0x01, 0x45, 0x45}, /* .0.0 ..1. .0.. 0..0 */
                    {0x44, 0x41, 0x41, 0x44, 0x44, 0x41, 0x41, 0x44}, /* .0.0 ..1. .0.. 0..1 */
                    {0x10, 0x10, 0x54, 0x54, 0x10, 0x10, 0x54, 0x54}, /* .0.0 ..1. .0.. 1..0 */
                    {0x55, 0x44, 0x55, 0x44, 0x44, 0x55, 0x44, 0x55}, /* .0.0 ..1. .0.. 1..1 */
                    {0x05, 0x05, 0x05, 0x05, 0x55, 0x55, 0x55, 0x55}, /* .0.0 ..1. .1.. 0..0 */
                    {0x11, 0x00, 0x11, 0x00, 0x00, 0x11, 0x00, 0x11}, /* .0.0 ..1. .1.. 0..1 */
                    {0x54, 0x54, 0x54, 0x54, 0x04, 0x04, 0x04, 0x04}, /* .0.0 ..1. .1.. 1..0 */
                    {0x04, 0x15, 0x04, 0x15, 0x15, 0x04, 0x15, 0x04}, /* .0.0 ..1. .1.. 1..1 */
                    {0x40, 0x40, 0x40, 0x40, 0x10, 0x10, 0x10, 0x10}, /* .0.1 ..0. .0.. 0..0 */
                    {0x15, 0x15, 0x01, 0x01, 0x01, 0x01, 0x15, 0x15}, /* .0.1 ..0. .0.. 0..1 */
                    {0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51, 0x51}, /* .0.1 ..0. .0.. 1..0 */
                    {0x01, 0x01, 0x15, 0x15, 0x15, 0x15, 0x01, 0x01}, /* .0.1 ..0. .0.. 1..1 */
                    {0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14}, /* .0.1 ..0. .1.. 0..0 */
                    {0x50, 0x50, 0x44, 0x44, 0x44, 0x44, 0x50, 0x50}, /* .0.1 ..0. .1.. 0..1 */
                    {0x00, 0x00, 0x14, 0x14, 0x50, 0x50, 0x44, 0x44}, /* .0.1 ..0. .1.. 1..0 */
                    {0x45, 0x04, 0x45, 0x04, 0x45, 0x04, 0x45, 0x04}, /* .0.1 ..0. .1.. 1..1 */
                    {0x11, 0x11, 0x55, 0x55, 0x05, 0x05, 0x41, 0x41}, /* .0.1 ..1. .0.. 0..0 */
                    {0x54, 0x15, 0x54, 0x15, 0x54, 0x15, 0x54, 0x15}, /* .0.1 ..1. .0.. 0..1 */
                    {0x04, 0x04, 0x40, 0x40, 0x10, 0x10, 0x54, 0x54}, /* .0.1 ..1. .0.. 1..0 */
                    {0x10, 0x51, 0x10, 0x51, 0x10, 0x51, 0x10, 0x51}, /* .0.1 ..1. .0.. 1..1 */
                    {0x55, 0x50, 0x50, 0x55, 0x55, 0x50, 0x50, 0x55}, /* .0.1 ..1. .1.. 0..0 */
                    {0x05, 0x05, 0x41, 0x41, 0x05, 0x05, 0x41, 0x41}, /* .0.1 ..1. .1.. 0..1 */
                    {0x41, 0x44, 0x44, 0x41, 0x41, 0x44, 0x44, 0x41}, /* .0.1 ..1. .1.. 1..0 */
                    {0x14, 0x14, 0x50, 0x50, 0x14, 0x14, 0x50, 0x50}, /* .0.1 ..1. .1.. 1..1 */
                    {0x55, 0x14, 0x50, 0x11, 0x41, 0x00, 0x44, 0x05}, /* .1.0 ..0. .0.. 0..0 */
                    {0x05, 0x00, 0x41, 0x44, 0x14, 0x11, 0x50, 0x55}, /* .1.0 ..0. .0.. 0..1 */
                    {0x41, 0x00, 0x44, 0x05, 0x55, 0x14, 0x50, 0x11}, /* .1.0 ..0. .0.. 1..0 */
                    {0x14, 0x11, 0x50, 0x55, 0x05, 0x00, 0x41, 0x44}, /* .1.0 ..0. .0.. 1..1 */
                    {0x50, 0x11, 0x55, 0x14, 0x44, 0x05, 0x41, 0x00}, /* .1.0 ..0. .1.. 0..0 */
                    {0x00, 0x05, 0x44, 0x41, 0x11, 0x14, 0x55, 0x50}, /* .1.0 ..0. .1.. 0..1 */
                    {0x15, 0x04, 0x10, 0x01, 0x01, 0x10, 0x04, 0x15}, /* .1.0 ..0. .1.. 1..0 */
                    {0x51, 0x54, 0x45, 0x40, 0x40, 0x45, 0x54, 0x51}, /* .1.0 ..0. .1.. 1..1 */
                    {0x01, 0x10, 0x04, 0x15, 0x15, 0x04, 0x10, 0x01}, /* .1.0 ..1. .0.. 0..0 */
                    {0x44, 0x41, 0x50, 0x55, 0x55, 0x50, 0x41, 0x44}, /* .1.0 ..1. .0.. 0..1 */
                    {0x10, 0x01, 0x15, 0x04, 0x04, 0x15, 0x01, 0x10}, /* .1.0 ..1. .0.. 1..0 */
                    {0x55, 0x14, 0x50, 0x11, 0x55, 0x14, 0x50, 0x11}, /* .1.0 ..1. .0.. 1..1 */
                    {0x05, 0x00, 0x00, 0x05, 0x55, 0x50, 0x50, 0x55}, /* .1.0 ..1. .1.. 0..0 */
                    {0x11, 0x50, 0x14, 0x55, 0x11, 0x50, 0x14, 0x55}, /* .1.0 ..1. .1.. 0..1 */
                    {0x54, 0x51, 0x51, 0x54, 0x04, 0x01, 0x01, 0x04}, /* .1.0 ..1. .1.. 1..0 */
                    {0x04, 0x45, 0x01, 0x40, 0x04, 0x45, 0x01, 0x40}, /* .1.0 ..1. .1.. 1..1 */
                    {0x40, 0x45, 0x45, 0x40, 0x10, 0x15, 0x15, 0x10}, /* .1.1 ..0. .0.. 0..0 */
                    {0x15, 0x04, 0x10, 0x01, 0x45, 0x54, 0x40, 0x51}, /* .1.1 ..0. .0.. 0..1 */
                    {0x51, 0x51, 0x45, 0x45, 0x01, 0x01, 0x15, 0x15}, /* .1.1 ..0. .0.. 1..0 */
                    {0x01, 0x10, 0x04, 0x15, 0x51, 0x40, 0x54, 0x45}, /* .1.1 ..0. .0.. 1..1 */
                    {0x14, 0x14, 0x00, 0x00, 0x44, 0x44, 0x50, 0x50}, /* .1.1 ..0. .1.. 0..0 */
                    {0x50, 0x41, 0x55, 0x44, 0x00, 0x11, 0x05, 0x14}, /* .1.1 ..0. .1.. 0..1 */
                    {0x00, 0x41, 0x00, 0x41, 0x11, 0x50, 0x11, 0x50}, /* .1.1 ..0. .1.. 1..0 */
                    {0x45, 0x04, 0x40, 0x01, 0x51, 0x10, 0x54, 0x15}, /* .1.1 ..0. .1.. 1..1 */
                    {0x11, 0x14, 0x55, 0x50, 0x00, 0x05, 0x44, 0x41}, /* .1.1 ..1. .0.. 0..0 */
                    {0x54, 0x15, 0x51, 0x10, 0x40, 0x01, 0x45, 0x04}, /* .1.1 ..1. .0.. 0..1 */
                    {0x04, 0x01, 0x40, 0x45, 0x15, 0x10, 0x51, 0x54}, /* .1.1 ..1. .0.. 1..0 */
                    {0x10, 0x51, 0x15, 0x54, 0x04, 0x45, 0x01, 0x40}, /* .1.1 ..1. .0.. 1..1 */
                    {0x55, 0x50, 0x41, 0x44, 0x44, 0x41, 0x50, 0x55}, /* .1.1 ..1. .1.. 0..0 */
                    {0x05, 0x14, 0x00, 0x11, 0x11, 0x00, 0x14, 0x05}, /* .1.1 ..1. .1.. 0..1 */
                    {0x41, 0x44, 0x55, 0x50, 0x50, 0x55, 0x44, 0x41}, /* .1.1 ..1. .1.. 1..0 */
                    {0x14, 0x05, 0x11, 0x00, 0x00, 0x11, 0x05, 0x14}, /* .1.1 ..1. .1.. 1..1 */};
        int A;
        UBytePtr rom = memory_region(REGION_CPU1);
        int diff = memory_region_length(REGION_CPU1) / 2;

        memory_set_opcode_base(0, new UBytePtr(rom, diff));

        for (A = 0x0000; A < 0x8000; A++) {
            int row, col;
            char src;

            src = rom.read(A);

            /* pick the translation table from bits 0, 3, 6, 9, 12 and 14 of the address */
            row = (A & 1) + (((A >> 3) & 1) << 1) + (((A >> 6) & 1) << 2)
                    + (((A >> 9) & 1) << 3) + (((A >> 12) & 1) << 4) + (((A >> 14) & 1) << 5);

            /* pick the offset in the table from bits 0, 2, 4 and 6 of the source data */
            col = ((src >> 0) & 1) + (((src >> 2) & 1) << 1) + (((src >> 4) & 1) << 2);
            /* the bottom half of the translation table is the mirror image of the top */
            if ((src & 0x40) != 0) {
                col = 7 - col;
            }

            /* decode the opcodes */
            rom.write(A + diff, src ^ opcode_xortable[row][col] ^ 0x00);

            /* decode the data */
            rom.write(A, src ^ data_xortable[row][col]);
        }

        /* copy the opcodes from the not encrypted part of the ROMs */
        for (A = 0x8000; A < diff; A++) {
            rom.write(A + diff, rom.read(A));
        }
    }

    public static void gardia_decode() {
        /* not decoded yet! */
    }

}
